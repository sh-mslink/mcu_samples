<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BLE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BLE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Dec 28 16:17:17 2020
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sconn_onSleep &rArr; s_opcodeCheckOld &rArr; att_server_rdByType &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4e]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4e]">ACC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from at32f4xx_it.o(i.BusFault_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[51]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from at32f4xx_it.o(i.DebugMon_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[56]">ETH_WKUP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from at32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from at32f4xx_it.o(i.HardFault_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[48]">I2C3_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[47]">I2C3_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from at32f4xx_it.o(i.MemManage_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from at32f4xx_it.o(i.NMI_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from at32f4xx_it.o(i.PendSV_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3b]">SDIO1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[46]">SDIO2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2e]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3d]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[49]">SPI4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from at32f4xx_it.o(i.SVC_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from at32f4xx_it.o(i.SysTick_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f407vgt7.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[22]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[25]">TMR1_CC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[23]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[24]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[26]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[27]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[28]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3c]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[40]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[41]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[35]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[38]">TMR8_CC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[36]">TMR8_OV_TMR13_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[37]">TMR8_TRG_COM_TMR14_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[53]">UART7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[54]">UART8_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from retarget.o(i.USART2_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4f]">USB_HP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[50]">USB_LP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from at32f4xx_it.o(i.UsageFault_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3a]">XMC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[59]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f407vgt7.o(.text)
 <LI><a href="#[5e]">adv_generic_onRxAA</a> from fsm_adv_generic.o(i.adv_generic_onRxAA) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[5f]">adv_generic_onRxPDU</a> from fsm_adv_generic.o(i.adv_generic_onRxPDU) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[61]">adv_generic_onSleep</a> from fsm_adv_generic.o(i.adv_generic_onSleep) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[5c]">adv_generic_onStart</a> from fsm_adv_generic.o(i.adv_generic_onStart) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[60]">adv_generic_onTxStarted</a> from fsm_adv_generic.o(i.adv_generic_onTxStarted) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[5d]">adv_generic_onWakeup</a> from fsm_adv_generic.o(i.adv_generic_onWakeup) referenced from fsm_adv_generic.o(.constdata)
 <LI><a href="#[5a]">fputc</a> from at32_board.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[73]">m_opcodeCheck</a> from master_dispatch.o(i.m_opcodeCheck) referenced from master_dispatch.o(.constdata)
 <LI><a href="#[57]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6f]">mconn_onRxAA</a> from fsm_mconn_sleep.o(i.mconn_onRxAA) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[70]">mconn_onRxPDU</a> from fsm_mconn_sleep.o(i.mconn_onRxPDU) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[72]">mconn_onSleep</a> from fsm_mconn_sleep.o(i.mconn_onSleep) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[6d]">mconn_onStart</a> from fsm_mconn_sleep.o(i.mconn_onStart) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[71]">mconn_onTxStarted</a> from fsm_mconn_sleep.o(i.mconn_onTxStarted) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[6e]">mconn_onWakeup</a> from fsm_mconn_sleep.o(i.mconn_onWakeup) referenced from fsm_mconn_sleep.o(.constdata)
 <LI><a href="#[5b]">s_opcodeCheck</a> from slave_dispatch.o(i.s_opcodeCheck) referenced from slave_dispatch.o(.constdata)
 <LI><a href="#[64]">scan_onRxAA</a> from fsm_scan.o(i.scan_onRxAA) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[65]">scan_onRxPDU</a> from fsm_scan.o(i.scan_onRxPDU) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[67]">scan_onSleep</a> from fsm_scan.o(i.scan_onSleep) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[62]">scan_onStart</a> from fsm_scan.o(i.scan_onStart) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[66]">scan_onTxStarted</a> from fsm_scan.o(i.scan_onTxStarted) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[63]">scan_onWakeup</a> from fsm_scan.o(i.scan_onWakeup) referenced from fsm_scan.o(.constdata)
 <LI><a href="#[69]">sconn_onRxAA</a> from fsm_sconn.o(i.sconn_onRxAA) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[6a]">sconn_onRxPDU</a> from fsm_sconn.o(i.sconn_onRxPDU) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[6c]">sconn_onSleep</a> from fsm_sconn.o(i.sconn_onSleep) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[6b]">sconn_onTxStarted</a> from fsm_sconn.o(i.sconn_onTxStarted) referenced from fsm_sconn.o(.constdata)
 <LI><a href="#[68]">sconn_onWakeup</a> from fsm_sconn.o(i.sconn_onWakeup) referenced from fsm_sconn.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[167]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[168]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[169]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[16a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[16b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_OV_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_TRG_COM_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savetxbuf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanDataSave
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_node
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d9]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[171]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[172]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>AT32_BUTTON_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at32_board.o(i.AT32_BUTTON_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT32_BUTTON_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[81]"></a>AT32_Board_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32_board.o(i.AT32_Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT32_Board_Init &rArr; AT32_LEDn_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[83]"></a>AT32_LEDn_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, at32_board.o(i.AT32_LEDn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT32_LEDn_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[84]"></a>AT32_LEDn_OFF</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32_board.o(i.AT32_LEDn_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ONOFF
</UL>

<P><STRONG><a name="[a6]"></a>AT32_LEDn_ON</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32_board.o(i.AT32_LEDn_ON))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ONOFF
</UL>

<P><STRONG><a name="[85]"></a>BSP_Init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_Init &rArr; Uart_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_KeyRegWrite
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CheckComPortInData</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, retarget.o(i.CheckComPortInData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConnectedStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
</UL>

<P><STRONG><a name="[94]"></a>CheckMcuTimerForRcCal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.CheckMcuTimerForRcCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckMcuTimerForRcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nMsRoutine
</UL>

<P><STRONG><a name="[98]"></a>ConnectStausUpdate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app.o(i.ConnectStausUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConnectStausUpdate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[139]"></a>Convert2BigLittleEndian</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm.o(i.Convert2BigLittleEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Convert2BigLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_c1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Delay_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at32_board.o(i.Delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[15a]"></a>DoRcConvert_HF_LF_COEF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.DoRcConvert_HF_LF_COEF))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[df]"></a>DoRcConvert_LF_AMPLE</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.DoRcConvert_LF_AMPLE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, at32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EXTI15_10_IRQHandler &rArr; ble_run &rArr; UsrProcCallback &rArr; CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EXTI_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>EXTI_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[88]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, at32f4xx_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[80]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_PinsRemapConfig</STRONG> (Thumb, 1388 bytes, Stack size 20 bytes, at32f4xx_gpio.o(i.GPIO_PinsRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinsRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqEnabled
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
</UL>

<P><STRONG><a name="[9e]"></a>GenerateTxQueue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, slave_dispatch.o(i.GenerateTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_process_pdu
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_push
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairFailed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llVersion
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llUnknownRsp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTerminate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPair
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llFea
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIG_CommandRej
</UL>

<P><STRONG><a name="[109]"></a>GetAdvCh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.GetAdvCh))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[108]"></a>GetAdvEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.GetAdvEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[f1]"></a>GetCharListDim</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app.o(i.GetCharListDim))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
</UL>

<P><STRONG><a name="[92]"></a>GetConnectedStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.GetConnectedStatus))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComPortInData
</UL>

<P><STRONG><a name="[ef]"></a>GetPrimaryServiceHandle</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, app.o(i.GetPrimaryServiceHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPrimaryServiceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
</UL>

<P><STRONG><a name="[90]"></a>GetSysTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_it.o(i.GetSysTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run_interrupt_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMcuTimerForRcCal
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwTimeOut
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSleep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBBTimerForRcCal
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IWDG_KeyRegWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_KeyRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8e]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8c]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8d]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[126]"></a>IrqMcuGotoSleepAndWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.IrqMcuGotoSleepAndWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>IsIrqEnabled</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.IsIrqEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsIrqEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[a4]"></a>IsSwTimeOut</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hwtest.o(i.IsSwTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsSwTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
</UL>

<P><STRONG><a name="[a5]"></a>LED_ONOFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.LED_ONOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ONOFF
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_ON
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
</UL>

<P><STRONG><a name="[107]"></a>McuGotoSleepAndWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.McuGotoSleepAndWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[cd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a7]"></a>ReMConnect</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsm_mconn_sleep.o(i.ReMConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReMConnect &rArr; radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[ad]"></a>ReSConnect</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsm_sconn.o(i.ReSConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReSConnect &rArr; radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[b1]"></a>SIG_CommandRej</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, l2cap.o(i.SIG_CommandRej))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SIG_CommandRej &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[b2]"></a>SPI_CS_Disable_</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.SPI_CS_Disable_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CS_Disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
</UL>

<P><STRONG><a name="[b4]"></a>SPI_CS_Enable_</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.SPI_CS_Enable_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CS_Enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
</UL>

<P><STRONG><a name="[86]"></a>SPI_Config</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, bsp.o(i.SPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DefaultInitParaConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b7]"></a>SPI_DefaultInitParaConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_DefaultInitParaConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[b9]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[bd]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>

<P><STRONG><a name="[bf]"></a>SPI_I2S_RxData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_RxData))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>

<P><STRONG><a name="[be]"></a>SPI_I2S_TxData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
</UL>

<P><STRONG><a name="[b8]"></a>SPI_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, at32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[ba]"></a>SPI_ReadBuf</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp.o(i.SPI_ReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>

<P><STRONG><a name="[bc]"></a>SPI_WriteBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp.o(i.SPI_WriteBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Enable_
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Disable_
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>

<P><STRONG><a name="[bb]"></a>SPI_WriteRead</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp.o(i.SPI_WriteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_RxData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>SaveCurrentHdr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slave_dispatch.o(i.SaveCurrentHdr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
</UL>

<P><STRONG><a name="[e8]"></a>SaveInitAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_control.o(i.SaveInitAddr))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_connPara
</UL>

<P><STRONG><a name="[124]"></a>SetBleIntRunningMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hwtest.o(i.SetBleIntRunningMode))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>SetMcuSleepFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwtest.o(i.SetMcuSleepFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[ae]"></a>SetSwTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hwtest.o(i.SetSwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSwTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mconnStart
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_ReSetLLSupvTimer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onRxPDU
</UL>

<P><STRONG><a name="[c3]"></a>StartBBTimerForRcCal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.StartBBTimerForRcCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartBBTimerForRcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
</UL>

<P><STRONG><a name="[9a]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; ble_nMsRoutine &rArr; radio_do_cal_step_check &rArr; radio_do_cal_check_result &rArr; mg_activate &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nMsRoutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo48MHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>Tx_len</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsm_base.o(i.Tx_len))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[c5]"></a>UART_Print_Init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, at32_board.o(i.UART_Print_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_Print_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, retarget.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_INTConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
</UL>

<P><STRONG><a name="[113]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ca]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>USART_INTConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, at32f4xx_usart.o(i.USART_INTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
</UL>

<P><STRONG><a name="[c7]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, at32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
</UL>

<P><STRONG><a name="[cb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
</UL>

<P><STRONG><a name="[87]"></a>Uart_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, bsp.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Uart_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinsRemapConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>UsrProcCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, retarget.o(i.UsrProcCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UsrProcCallback &rArr; CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComPortInData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ONOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[d0]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[175]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[99]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectStausUpdate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[177]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[178]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12b]"></a>aes_encrypt_HW</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.aes_encrypt_HW))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>

<P><STRONG><a name="[ea]"></a>att_ErrorFd_eCode</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, att.o(i.att_ErrorFd_eCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ec]"></a>att_exMtuReq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, att.o(i.att_exMtuReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = att_exMtuReq &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[ed]"></a>att_notFd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, att.o(i.att_notFd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ErrorFd_eCode
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
</UL>

<P><STRONG><a name="[ee]"></a>att_server_findByType</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, att.o(i.att_server_findByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = att_server_findByType &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrimaryServiceHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[f0]"></a>att_server_findIn</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, att.o(i.att_server_findIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = att_server_findIn &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharListDim
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[f2]"></a>att_server_rd</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, att.o(i.att_server_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = att_server_rd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
</UL>

<P><STRONG><a name="[f4]"></a>att_server_rdByGrType</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, app.o(i.att_server_rdByGrType))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = att_server_rdByGrType &rArr; att_server_rdByGrTypeRspPrimaryService &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrTypeRspPrimaryService
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[f5]"></a>att_server_rdByGrTypeRspPrimaryService</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, att.o(i.att_server_rdByGrTypeRspPrimaryService))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = att_server_rdByGrTypeRspPrimaryService &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
</UL>

<P><STRONG><a name="[f6]"></a>att_server_rdByType</STRONG> (Thumb, 606 bytes, Stack size 88 bytes, att.o(i.att_server_rdByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = att_server_rdByType &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfoData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharListDim
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[dc]"></a>bb_DoRcCal</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.bb_DoRcCal))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[f8]"></a>bb_advCalTimerIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.bb_advCalTimerIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bb_advCalTimerIrq &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nMsRoutine
</UL>

<P><STRONG><a name="[165]"></a>bb_advGenericSetup</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, fsm_adv_generic.o(i.bb_advGenericSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bb_advGenericSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
</UL>

<P><STRONG><a name="[163]"></a>bb_advGenericStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.bb_advGenericStart))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
</UL>

<P><STRONG><a name="[127]"></a>bb_getConnState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsm_base.o(i.bb_getConnState))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[f9]"></a>bb_mconnStart</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, fsm_mconn_sleep.o(i.bb_mconnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bb_mconnStart &rArr; SetSwTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpCheck_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conn
</UL>

<P><STRONG><a name="[164]"></a>bb_scanSetup</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fsm_scan.o(i.bb_scanSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bb_scanSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
</UL>

<P><STRONG><a name="[128]"></a>bb_scanStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsm_scan.o(i.bb_scanStart))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[da]"></a>bb_sconnStart</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fsm_sconn.o(i.bb_sconnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bb_sconnStart &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_connPara
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sm_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[fc]"></a>bb_setConnState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_base.o(i.bb_setConnState))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mconnStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTerminate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[c4]"></a>ble_nMsRoutine</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hwtest.o(i.ble_nMsRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_nMsRoutine &rArr; radio_do_cal_step_check &rArr; radio_do_cal_check_result &rArr; mg_activate &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_step_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMcuTimerForRcCal
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9d]"></a>ble_run</STRONG> (Thumb, 1028 bytes, Stack size 40 bytes, hwtest.o(i.ble_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_run &rArr; UsrProcCallback &rArr; CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrProcCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGotoSleepAndWakeup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqEnabled
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_readIRQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHClock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getClock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_clearIRQ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvEnable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvCh
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMcuTimerForRcCal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwTimeOut
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run_interrupt_start
</UL>

<P><STRONG><a name="[10a]"></a>ble_run_interrupt_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hwtest.o(i.ble_run_interrupt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_run_interrupt_start &rArr; ble_run &rArr; UsrProcCallback &rArr; CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>ble_set_adv_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hwtest.o(i.ble_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_set_adv_data &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>ble_set_adv_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hwtest.o(i.ble_set_adv_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_set_adv_type &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[110]"></a>empty_pk</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_control.o(i.empty_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = empty_pk &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_len
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
</UL>

<P><STRONG><a name="[5a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at32_board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[14d]"></a>gatt_user_send_notify_data_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.gatt_user_send_notify_data_callback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[f7]"></a>getDeviceInfoData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(i.getDeviceInfoData))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
</UL>

<P><STRONG><a name="[123]"></a>get_ble_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hwtest.o(i.get_ble_version))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>get_current_ch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsm_sconn.o(i.get_current_ch))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
</UL>

<P><STRONG><a name="[157]"></a>get_node_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_queue.o(i.get_node_free))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
</UL>

<P><STRONG><a name="[15b]"></a>is_node_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_queue.o(i.is_node_empty))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[fb]"></a>mOpCheck_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, master_dispatch.o(i.mOpCheck_Start))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mconnStart
</UL>

<P><STRONG><a name="[114]"></a>m_GenerateTxQueue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, master_dispatch.o(i.m_GenerateTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_push
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_readReq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_readGrpBypService
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_Confirmation
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeChar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_notFd
</UL>

<P><STRONG><a name="[115]"></a>m_RdByGroupTypeRsp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, master_dispatch.o(i.m_RdByGroupTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_RdByGroupTypeRsp &rArr; m_att_readGrpBypService &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_readGrpBypService
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[117]"></a>m_RdByTypeChar</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, master_dispatch.o(i.m_RdByTypeChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_RdByTypeChar &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_attErrorRsp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeRsp
</UL>

<P><STRONG><a name="[118]"></a>m_RdByTypeRsp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, master_dispatch.o(i.m_RdByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_RdByTypeRsp &rArr; m_RdByTypeChar &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_character_hd_info
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[121]"></a>m_UpdateNESN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, master_dispatch.o(i.m_UpdateNESN))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[122]"></a>m_UpdateSN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, master_dispatch.o(i.m_UpdateSN))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[11a]"></a>m_attErrorRsp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, master_dispatch.o(i.m_attErrorRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_attErrorRsp &rArr; m_RdByTypeChar &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_readReq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[11c]"></a>m_att_Confirmation</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, master_dispatch.o(i.m_att_Confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_att_Confirmation &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[116]"></a>m_att_readGrpBypService</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, master_dispatch.o(i.m_att_readGrpBypService))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_att_readGrpBypService &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByGroupTypeRsp
</UL>

<P><STRONG><a name="[11b]"></a>m_att_readReq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, master_dispatch.o(i.m_att_readReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_att_readReq &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_attErrorRsp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[120]"></a>m_opcodeCheck_parser</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, master_dispatch.o(i.m_opcodeCheck_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_opcodeCheck_parser &rArr; radio_getHdr &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_readReq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_Confirmation
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_attErrorRsp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_UpdateSN
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_UpdateNESN
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeRsp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByGroupTypeRsp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; ble_run_interrupt_start &rArr; ble_run &rArr; UsrProcCallback &rArr; CheckComPortInData &rArr; sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_version
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run_interrupt_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Print_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBleIntRunningMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMcuGotoSleepAndWakeup
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[af]"></a>mg_activate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, macrogiga_driver.o(i.mg_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mg_activate &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_check_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_step_check
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[12a]"></a>mg_aes_encrypt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sm.o(i.mg_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_HW
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expandKey
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_dm
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_d1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_cal_MIC_Enc_s2m
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_LL_Dec_m2s
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_EDIV_Rand_LTK
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_s1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_c1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
</UL>

<P><STRONG><a name="[12d]"></a>mg_readBuf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, macrogiga_driver.o(i.mg_readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHClock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
</UL>

<P><STRONG><a name="[db]"></a>mg_readReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, macrogiga_driver.o(i.mg_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mg_readReg &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_check_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_readIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[12e]"></a>mg_writeBuf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, macrogiga_driver.o(i.mg_writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPayload
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setScanAInitA
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setPaGain
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setIrqMask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_step_check
</UL>

<P><STRONG><a name="[b0]"></a>mg_writeReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, macrogiga_driver.o(i.mg_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_step_check
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_clearIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[133]"></a>queue_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_queue.o(i.queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>

<P><STRONG><a name="[fa]"></a>queue_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, data_queue.o(i.queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mconnStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sOpCheck_Start
</UL>

<P><STRONG><a name="[134]"></a>queue_pop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, data_queue.o(i.queue_pop))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>

<P><STRONG><a name="[a1]"></a>queue_push</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_queue.o(i.queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_node
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>

<P><STRONG><a name="[102]"></a>radio_clearIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_clearIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_clearIRQ &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[e2]"></a>radio_do_cal</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_do_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = radio_do_cal &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[12f]"></a>radio_do_cal_check_result</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_do_cal_check_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_do_cal_check_result &rArr; mg_activate &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_step_check
</UL>

<P><STRONG><a name="[e1]"></a>radio_do_cal_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_do_cal_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_do_cal_start &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[fe]"></a>radio_do_cal_step_check</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_do_cal_step_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = radio_do_cal_step_check &rArr; radio_do_cal_check_result &rArr; mg_activate &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_check_result
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nMsRoutine
</UL>

<P><STRONG><a name="[103]"></a>radio_getClock</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, macrogiga_driver.o(i.radio_getClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_getClock &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[105]"></a>radio_getHClock</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_getHClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_getHClock &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[104]"></a>radio_getHdr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, macrogiga_driver.o(i.radio_getHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_getHdr &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[106]"></a>radio_getPdu</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_getPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_getPdu &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[125]"></a>radio_initBle</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, macrogiga_driver.o(i.radio_initBle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = radio_initBle &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setPaGain
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>radio_readIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_readIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_readIRQ &rArr; mg_readReg &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[a8]"></a>radio_setAccessCode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setAccessCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setAccessCode &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[d7]"></a>radio_setAdvHeader</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setAdvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setAdvHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onWakeup
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[d8]"></a>radio_setAdvPayload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_setAdvPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_setAdvPayload &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
</UL>

<P><STRONG><a name="[ac]"></a>radio_setChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_setChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setChannel &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onSleep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[a9]"></a>radio_setCrcInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setCrcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setCrcInit &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[e3]"></a>radio_setIrqMask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setIrqMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setIrqMask &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
</UL>

<P><STRONG><a name="[d4]"></a>radio_setMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setMode &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onWakeup
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxAA
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onWakeup
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onTxStarted
</UL>

<P><STRONG><a name="[130]"></a>radio_setPaGain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, macrogiga_driver.o(i.radio_setPaGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_setPaGain &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
</UL>

<P><STRONG><a name="[131]"></a>radio_setScanAInitA</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setScanAInitA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setScanAInitA &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onWakeup
</UL>

<P><STRONG><a name="[d6]"></a>radio_setStartTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setStartTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxPDU
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onWakeup
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onWakeup
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onTxStarted
</UL>

<P><STRONG><a name="[aa]"></a>radio_setTimeout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onWakeup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onStart
</UL>

<P><STRONG><a name="[132]"></a>radio_setTxPayload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_setTxPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = radio_setTxPayload &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoretxbuf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[111]"></a>radio_setTxPduHeader</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setTxPduHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoretxbuf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[ab]"></a>radio_setWakeupTime</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_setWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_setWakeupTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[d5]"></a>radio_sleep</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, macrogiga_driver.o(i.radio_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_initBle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advCalTimerIrq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onWakeup
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onTxStarted
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxAA
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onTxStarted
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxAA
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onTxStarted
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxPDU
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onRxAA
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onTxStarted
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onStart
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onRxPDU
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onRxAA
</UL>

<P><STRONG><a name="[de]"></a>radio_wakeup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, macrogiga_driver.o(i.radio_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = radio_wakeup &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onStart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[11e]"></a>readQueue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, data_queue.o(i.readQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_pop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_empty
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheck
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck
</UL>

<P><STRONG><a name="[fd]"></a>reset_sm_flags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_control.o(i.reset_sm_flags))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
</UL>

<P><STRONG><a name="[e0]"></a>restoretxbuf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_control.o(i.restoretxbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = restoretxbuf &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onSleep
</UL>

<P><STRONG><a name="[135]"></a>sOpCheck_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, slave_dispatch.o(i.sOpCheck_Start))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[14f]"></a>s_llChmReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_control.o(i.s_llChmReq))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[136]"></a>s_llConnParaRsp</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ll_control.o(i.s_llConnParaRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = s_llConnParaRsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[138]"></a>s_llEncReq</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, ll_control.o(i.s_llEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = s_llEncReq &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_LTK
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Update_SK_IV
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert2BigLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[13c]"></a>s_llFea</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ll_control.o(i.s_llFea))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = s_llFea &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[13e]"></a>s_llSmGetTKType</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm.o(i.s_llSmGetTKType))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPair
</UL>

<P><STRONG><a name="[13d]"></a>s_llSmPair</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, ll_control.o(i.s_llSmPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = s_llSmPair &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmGetTKType
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[13f]"></a>s_llSmPairConfirm</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, ll_control.o(i.s_llSmPairConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = s_llSmPairConfirm &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_c1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert2BigLittleEndian
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[141]"></a>s_llSmPairFailed</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ll_control.o(i.s_llSmPairFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = s_llSmPairFailed &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
</UL>

<P><STRONG><a name="[142]"></a>s_llSmPairRand</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, ll_control.o(i.s_llSmPairRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = s_llSmPairRand &rArr; s_llSmPairFailed &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_s1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_func_c1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert2BigLittleEndian
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairFailed
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[144]"></a>s_llStartEncRsp</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, ll_control.o(i.s_llStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = s_llStartEncRsp &rArr; sm_generate_EDIV_Rand_LTK &rArr; sm_function_dm &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_EDIV_Rand_LTK
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_ch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert2BigLittleEndian
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[147]"></a>s_llTer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ll_control.o(i.s_llTer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = s_llTer &rArr; empty_pk &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_pk
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[148]"></a>s_llTerminate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_control.o(i.s_llTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = s_llTerminate &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[149]"></a>s_llUnknownRsp</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_control.o(i.s_llUnknownRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = s_llUnknownRsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[14a]"></a>s_llVersion</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_control.o(i.s_llVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = s_llVersion &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[14b]"></a>s_opcodeCheckOld</STRONG> (Thumb, 726 bytes, Stack size 32 bytes, slave_dispatch.o(i.s_opcodeCheckOld))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = s_opcodeCheckOld &rArr; att_server_rdByType &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_rd_rsp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_blob_rd_rsp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_user_send_notify_data_callback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrType
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_exMtuReq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ErrorFd_eCode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_parser
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconnUpChm
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconnConUpdate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llVersion
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llUnknownRsp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTerminate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llTer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPair
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llFea
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llConnParaRsp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llChmReq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIG_CommandRej
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[156]"></a>savetxbuf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_control.o(i.savetxbuf))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
</UL>

<P><STRONG><a name="[14e]"></a>sconnConUpdate</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, fsm_sconn.o(i.sconnConUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sconnConUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[150]"></a>sconnUpChm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsm_sconn.o(i.sconnUpChm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sconnUpChm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[e4]"></a>sconn_ReSetLLSupvTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsm_sconn.o(i.sconn_ReSetLLSupvTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sconn_ReSetLLSupvTimer &rArr; SetSwTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_generic_onStart
</UL>

<P><STRONG><a name="[93]"></a>sconn_notifydata</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, att.o(i.sconn_notifydata))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sconn_notifydata &rArr; ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_node_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComPortInData
</UL>

<P><STRONG><a name="[15c]"></a>ser_execute_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.ser_execute_write))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
</UL>

<P><STRONG><a name="[154]"></a>ser_execute_write_rsp</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, att.o(i.ser_execute_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ser_execute_write_rsp &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[158]"></a>ser_notify_handle</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, att.o(i.ser_notify_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ser_notify_handle &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_notifydata
</UL>

<P><STRONG><a name="[15d]"></a>ser_prepare_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.ser_prepare_write))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
</UL>

<P><STRONG><a name="[153]"></a>ser_prepare_write_rsp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, att.o(i.ser_prepare_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ser_prepare_write_rsp &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[155]"></a>ser_write_rsp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app.o(i.ser_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ser_write_rsp &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp_pkt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[15e]"></a>ser_write_rsp_pkt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, att.o(i.ser_write_rsp_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ser_write_rsp_pkt &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp
</UL>

<P><STRONG><a name="[152]"></a>server_blob_rd_rsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.server_blob_rd_rsp))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[151]"></a>server_rd_rsp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app.o(i.server_rd_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = server_rd_rsp &rArr; att_server_rd &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notFd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[119]"></a>show_character_hd_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, master_dispatch.o(i.show_character_hd_info))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RdByTypeRsp
</UL>

<P><STRONG><a name="[e9]"></a>sm_SetAddrType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_control.o(i.sm_SetAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_connPara
</UL>

<P><STRONG><a name="[13b]"></a>sm_Update_SK_IV</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sm.o(i.sm_Update_SK_IV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_Update_SK_IV
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
</UL>

<P><STRONG><a name="[140]"></a>sm_func_c1</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sm.o(i.sm_func_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sm_func_c1 &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert2BigLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairConfirm
</UL>

<P><STRONG><a name="[143]"></a>sm_func_s1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sm.o(i.sm_func_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_func_s1 &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llSmPairRand
</UL>

<P><STRONG><a name="[146]"></a>sm_generate_EDIV_Rand_LTK</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, sm.o(i.sm_generate_EDIV_Rand_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sm_generate_EDIV_Rand_LTK &rArr; sm_function_dm &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_dm
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_d1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llStartEncRsp
</UL>

<P><STRONG><a name="[13a]"></a>sm_generate_LTK</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sm.o(i.sm_generate_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sm_generate_LTK &rArr; sm_function_dm &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_dm
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_function_d1
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_llEncReq
</UL>

<P><STRONG><a name="[14c]"></a>sm_parser</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sm.o(i.sm_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_parser &rArr; sm_LL_Dec_m2s &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_LL_Dec_m2s
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
</UL>

<P><STRONG><a name="[a0]"></a>sm_process_pdu</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sm.o(i.sm_process_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_cal_MIC_Enc_s2m
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>

<P><STRONG><a name="[100]"></a>test_adv_generic</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hwtest.o(i.test_adv_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = test_adv_generic &rArr; update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectStausUpdate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advGenericStart
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_generic_para
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[11f]"></a>txRsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_control.o(i.txRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = txRsp &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPduHeader
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTxPayload
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savetxbuf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheck
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c1]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo48MHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48MHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c2]"></a>SetSysClockTo48MHSI</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, system_at32f4xx.o(i.SetSysClockTo48MHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo48MHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[eb]"></a>att_rsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, att.o(i.att_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_write_rsp_pkt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByGrTypeRspPrimaryService
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_prepare_write_rsp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_notify_handle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_execute_write_rsp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_rdByType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findIn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_findByType
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_exMtuReq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_ErrorFd_eCode
</UL>

<P><STRONG><a name="[8f]"></a>CanSleep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hwtest.o(i.CanSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[ff]"></a>test_scan</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, hwtest.o(i.test_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_scan &rArr; bb_scanSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_scanStart
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_scanSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_run
</UL>

<P><STRONG><a name="[10c]"></a>update_adv_generic_para</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, hwtest.o(i.update_adv_generic_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_adv_generic_para &rArr; bb_advGenericSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceInfoData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_advGenericSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_type
</UL>

<P><STRONG><a name="[10f]"></a>create_node</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, data_queue.o(i.create_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_push
</UL>

<P><STRONG><a name="[5b]"></a>s_opcodeCheck</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, slave_dispatch.o(i.s_opcodeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = s_opcodeCheck &rArr; txRsp &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slave_dispatch.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>adv_generic_onRxAA</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsm_adv_generic.o(i.adv_generic_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adv_generic_onRxAA &rArr; radio_setMode &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBBTimerForRcCal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>adv_generic_onRxPDU</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fsm_adv_generic.o(i.adv_generic_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adv_generic_onRxPDU &rArr; bb_sconnStart &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>adv_generic_onSleep</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, fsm_adv_generic.o(i.adv_generic_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adv_generic_onSleep &rArr; radio_do_cal &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setWakeupTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_writeReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuSleepFlag
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoretxbuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_DoRcCal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>adv_generic_onStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.adv_generic_onStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adv_generic_onStart &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setIrqMask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_ReSetLLSupvTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>adv_generic_onTxStarted</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsm_adv_generic.o(i.adv_generic_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adv_generic_onTxStarted &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>adv_generic_onWakeup</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fsm_adv_generic.o(i.adv_generic_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adv_generic_onWakeup &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_adv_generic.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>ScanDataSave</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsm_scan.o(i.ScanDataSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ScanDataSave
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
</UL>

<P><STRONG><a name="[10e]"></a>create_conn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsm_scan.o(i.create_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_conn &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvPayload
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_mconnStart
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_onRxPDU
</UL>

<P><STRONG><a name="[64]"></a>scan_onRxAA</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsm_scan.o(i.scan_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scan_onRxAA &rArr; radio_setMode &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>scan_onRxPDU</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fsm_scan.o(i.scan_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = scan_onRxPDU &rArr; create_conn &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readBuf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_conn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanDataSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>scan_onSleep</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsm_scan.o(i.scan_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = scan_onSleep &rArr; radio_do_cal &rArr; mg_writeReg &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_do_cal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_DoRcCal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>scan_onStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsm_scan.o(i.scan_onStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scan_onStart &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setChannel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>scan_onTxStarted</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsm_scan.o(i.scan_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scan_onTxStarted &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>scan_onWakeup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsm_scan.o(i.scan_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scan_onWakeup &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setScanAInitA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAdvHeader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_scan.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>aes_encr</STRONG> (Thumb, 912 bytes, Stack size 64 bytes, sm.o(i.aes_encr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;galois_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>

<P><STRONG><a name="[12c]"></a>expandKey</STRONG> (Thumb, 214 bytes, Stack size 36 bytes, sm.o(i.expandKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = expandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>

<P><STRONG><a name="[e6]"></a>galois_mul2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sm.o(i.galois_mul2))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
</UL>

<P><STRONG><a name="[15f]"></a>sm_LL_Dec_m2s</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, sm.o(i.sm_LL_Dec_m2s))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sm_LL_Dec_m2s &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_parser
</UL>

<P><STRONG><a name="[160]"></a>sm_cal_MIC_Enc_s2m</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, sm.o(i.sm_cal_MIC_Enc_s2m))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_process_pdu
</UL>

<P><STRONG><a name="[161]"></a>sm_function_d1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm.o(i.sm_function_d1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_function_d1 &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_LTK
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_EDIV_Rand_LTK
</UL>

<P><STRONG><a name="[162]"></a>sm_function_dm</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, sm.o(i.sm_function_dm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sm_function_dm &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_LTK
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_generate_EDIV_Rand_LTK
</UL>

<P><STRONG><a name="[95]"></a>ConnUpdate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsm_sconn.o(i.ConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConnUpdate &rArr; sconn_onNumUsedCh
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onNumUsedCh
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
</UL>

<P><STRONG><a name="[96]"></a>applyConnUpdate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsm_sconn.o(i.applyConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = applyConnUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnUpdate
</UL>

<P><STRONG><a name="[e7]"></a>apply_connPara</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, fsm_sconn.o(i.apply_connPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apply_connPara
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SetAddrType
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInitAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_sconnStart
</UL>

<P><STRONG><a name="[97]"></a>sconn_onNumUsedCh</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsm_sconn.o(i.sconn_onNumUsedCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sconn_onNumUsedCh
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onSleep
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnUpdate
</UL>

<P><STRONG><a name="[69]"></a>sconn_onRxAA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsm_sconn.o(i.sconn_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sconn_onRxAA &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onTxStarted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>sconn_onRxPDU</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, fsm_sconn.o(i.sconn_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sconn_onRxPDU &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_readReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_activate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentHdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>sconn_onSleep</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, fsm_sconn.o(i.sconn_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sconn_onSleep &rArr; s_opcodeCheckOld &rArr; att_server_rdByType &rArr; att_notFd &rArr; att_ErrorFd_eCode &rArr; att_rsp &rArr; GenerateTxQueue &rArr; sm_process_pdu &rArr; sm_cal_MIC_Enc_s2m &rArr; mg_aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectStausUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getPdu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getHdr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvEnable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_adv_generic
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_adv_type
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMcuSleepFlag
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onNumUsedCh
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnUpdate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getConnState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSConnect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_HF_LF_COEF
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_opcodeCheckOld
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sOpCheck_Start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_node_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>sconn_onTxStarted</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsm_sconn.o(i.sconn_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sconn_onTxStarted &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sconn_onRxAA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>sconn_onWakeup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsm_sconn.o(i.sconn_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sconn_onWakeup &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_sconn.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>mconn_onChannelSelection</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsm_mconn_sleep.o(i.mconn_onChannelSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mconn_onChannelSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onSleep
</UL>

<P><STRONG><a name="[6f]"></a>mconn_onRxAA</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsm_mconn_sleep.o(i.mconn_onRxAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mconn_onRxAA &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>mconn_onRxPDU</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsm_mconn_sleep.o(i.mconn_onRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mconn_onRxPDU &rArr; radio_sleep &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>mconn_onSleep</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fsm_mconn_sleep.o(i.mconn_onSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mconn_onSleep &rArr; m_opcodeCheck_parser &rArr; radio_getHdr &rArr; mg_readBuf &rArr; SPI_ReadBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectStausUpdate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setCrcInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setAccessCode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setConnState
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_scanStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdvEnable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getConnState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMConnect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoRcConvert_LF_AMPLE
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mconn_onChannelSelection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>mconn_onStart</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsm_mconn_sleep.o(i.mconn_onStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mconn_onStart &rArr; radio_setTimeout &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>mconn_onTxStarted</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsm_mconn_sleep.o(i.mconn_onTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mconn_onTxStarted &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>mconn_onWakeup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsm_mconn_sleep.o(i.mconn_onWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mconn_onWakeup &rArr; radio_setStartTime &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_mconn_sleep.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>m_att_notFd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, master_dispatch.o(i.m_att_notFd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_att_notFd &rArr; m_GenerateTxQueue &rArr; queue_push &rArr; create_node
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_GenerateTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_opcodeCheck_parser
</UL>

<P><STRONG><a name="[73]"></a>m_opcodeCheck</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, master_dispatch.o(i.m_opcodeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_opcodeCheck &rArr; txRsp &rArr; radio_setTxPduHeader &rArr; mg_writeBuf &rArr; SPI_WriteBuf &rArr; SPI_WriteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRsp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master_dispatch.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[d3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

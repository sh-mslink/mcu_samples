<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rt-thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rt-thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Dec 02 09:35:47 2020
<BR><P>
<H3>Maximum Stack Usage =       1196 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1a6]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c8]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">rt_kprintf</a><BR>
 <LI><a href="#[1b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">NMI_Handler</a><BR>
 <LI><a href="#[1d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">MemManage_Handler</a><BR>
 <LI><a href="#[1e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">BusFault_Handler</a><BR>
 <LI><a href="#[1f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UsageFault_Handler</a><BR>
 <LI><a href="#[20]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">SVC_Handler</a><BR>
 <LI><a href="#[21]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DebugMon_Handler</a><BR>
 <LI><a href="#[68]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">ACC_IRQHandler</a><BR>
 <LI><a href="#[278]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[278]">copydir</a><BR>
 <LI><a href="#[3fc]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f2]">lwip_sendto</a><BR>
 <LI><a href="#[41c]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36e]">msh_exec</a><BR>
 <LI><a href="#[3d5]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d5]">netconn_drain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">ACC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[36]">ADC1_2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[53]">ADC3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1e]">BusFault_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[39]">CAN1_RX1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3a]">CAN1_SCE_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[65]">CAN2_RX0_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[66]">CAN2_RX1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[67]">CAN2_SCE_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[64]">CAN2_TX_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[30]">DMA1_Channel2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[31]">DMA1_Channel3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[32]">DMA1_Channel4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[33]">DMA1_Channel5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[34]">DMA1_Channel6_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[35]">DMA1_Channel7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[21]">DebugMon_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6f]">ETH_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[70]">ETH_WKUP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2a]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4c]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2b]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2c]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2d]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[2e]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3b]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[28]">FLASH_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[44]">I2C1_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[43]">I2C1_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[46]">I2C2_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[45]">I2C2_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1d]">MemManage_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1b]">NMI_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[25]">PVD_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[22]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[29]">RCC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4d]">RTCAlarm_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[27]">RTC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[55]">SDIO1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[60]">SDIO2_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[47]">SPI1_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[48]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[57]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[63]">SPI4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f407vgt7.o(.text)
 <LI><a href="#[26]">TAMPER_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3c]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3f]">TMR1_CC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3d]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[3e]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[40]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[41]">TMR3_GLOBAL_IRQHandler</a> from drv_hwtimer.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[42]">TMR4_GLOBAL_IRQHandler</a> from drv_hwtimer.o(i.TMR4_GLOBAL_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[56]">TMR5_GLOBAL_IRQHandler</a> from drv_hwtimer.o(i.TMR5_GLOBAL_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5a]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[5b]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4f]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[52]">TMR8_CC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[50]">TMR8_OV_TMR13_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[51]">TMR8_TRG_COM_TMR14_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[58]">UART4_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[59]">UART5_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6d]">UART7_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6e]">UART8_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[49]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4a]">USART2_IRQHandler</a> from drv_usart.o(i.USART2_IRQHandler) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4b]">USART3_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6c]">USART6_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[4e]">USBWakeUp_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[37]">USB_HP_CAN1_TX_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[69]">USB_HP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[38]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[6a]">USB_LP_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[1f]">UsageFault_Handler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[24]">WWDG_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[54]">XMC_IRQHandler</a> from startup_at32f407vgt7.o(.text) referenced from startup_at32f407vgt7.o(RESET)
 <LI><a href="#[172]">__main</a> from __main.o(!!!main) referenced from startup_at32f407vgt7.o(.text)
 <LI><a href="#[a6]">_adc_control</a> from adc.o(i._adc_control) referenced from adc.o(i.rt_hw_adc_register)
 <LI><a href="#[a5]">_adc_read</a> from adc.o(i._adc_read) referenced from adc.o(i.rt_hw_adc_register)
 <LI><a href="#[f]">_allow_removal</a> from mstorage.o(i._allow_removal) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[76]">_cdc_set_line_coding_callback</a> from cdc_vcom.o(i._cdc_set_line_coding_callback) referenced from cdc_vcom.o(i._cdc_set_line_coding)
 <LI><a href="#[c3]">_ep_cmd_handler</a> from cdc_vcom.o(i._ep_cmd_handler) referenced from cdc_vcom.o(i.rt_usbd_function_cdc_create)
 <LI><a href="#[c5]">_ep_in_handler</a> from cdc_vcom.o(i._ep_in_handler) referenced from cdc_vcom.o(i.rt_usbd_function_cdc_create)
 <LI><a href="#[c8]">_ep_in_handler</a> from hid.o(i._ep_in_handler) referenced from hid.o(i.rt_usbd_function_hid_create)
 <LI><a href="#[ca]">_ep_in_handler</a> from mstorage.o(i._ep_in_handler) referenced from mstorage.o(i.rt_usbd_function_mstorage_create)
 <LI><a href="#[c4]">_ep_out_handler</a> from cdc_vcom.o(i._ep_out_handler) referenced from cdc_vcom.o(i.rt_usbd_function_cdc_create)
 <LI><a href="#[c7]">_ep_out_handler</a> from hid.o(i._ep_out_handler) referenced from hid.o(i.rt_usbd_function_hid_create)
 <LI><a href="#[cb]">_ep_out_handler</a> from mstorage.o(i._ep_out_handler) referenced from mstorage.o(i.rt_usbd_function_mstorage_create)
 <LI><a href="#[7]">_function_disable</a> from cdc_vcom.o(i._function_disable) referenced 6 times from cdc_vcom.o(.data)
 <LI><a href="#[6]">_function_enable</a> from cdc_vcom.o(i._function_enable) referenced 6 times from cdc_vcom.o(.data)
 <LI><a href="#[73]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[77]">_hid_set_report_callback</a> from hid.o(i._hid_set_report_callback) referenced from hid.o(i._interface_handler)
 <LI><a href="#[bf]">_hid_write</a> from hid.o(i._hid_write) referenced from hid.o(i.rt_usb_hid_init)
 <LI><a href="#[e]">_inquiry_cmd</a> from mstorage.o(i._inquiry_cmd) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[c2]">_interface_handler</a> from cdc_vcom.o(i._interface_handler) referenced from cdc_vcom.o(i.rt_usbd_function_cdc_create)
 <LI><a href="#[c6]">_interface_handler</a> from hid.o(i._interface_handler) referenced from hid.o(i.rt_usbd_function_hid_create)
 <LI><a href="#[c9]">_interface_handler</a> from mstorage.o(i._interface_handler) referenced from mstorage.o(i.rt_usbd_function_mstorage_create)
 <LI><a href="#[10]">_mode_sense_6</a> from mstorage.o(i._mode_sense_6) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[a1]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[9f]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[a0]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[75]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a4]">_pwm_control</a> from rt_drv_pwm.o(i._pwm_control) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[a2]">_pwm_read</a> from rt_drv_pwm.o(i._pwm_read) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[a3]">_pwm_write</a> from rt_drv_pwm.o(i._pwm_write) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[14]">_read_10</a> from mstorage.o(i._read_10) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[12]">_read_capacities</a> from mstorage.o(i._read_capacities) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[13]">_read_capacity</a> from mstorage.o(i._read_capacity) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[d]">_request_sense</a> from mstorage.o(i._request_sense) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[74]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[bc]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[ba]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[bb]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[11]">_start_stop</a> from mstorage.o(i._start_stop) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[c]">_test_unit_ready</a> from mstorage.o(i._test_unit_ready) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[110]">_vcom_configure</a> from cdc_vcom.o(i._vcom_configure) referenced from cdc_vcom.o(.constdata)
 <LI><a href="#[111]">_vcom_control</a> from cdc_vcom.o(i._vcom_control) referenced from cdc_vcom.o(.constdata)
 <LI><a href="#[113]">_vcom_getc</a> from cdc_vcom.o(i._vcom_getc) referenced from cdc_vcom.o(.constdata)
 <LI><a href="#[112]">_vcom_putc</a> from cdc_vcom.o(i._vcom_putc) referenced from cdc_vcom.o(.constdata)
 <LI><a href="#[114]">_vcom_tx</a> from cdc_vcom.o(i._vcom_tx) referenced from cdc_vcom.o(.constdata)
 <LI><a href="#[16]">_verify_10</a> from mstorage.o(i._verify_10) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[cc]">_workqueue_thread_entry</a> from workqueue.o(i._workqueue_thread_entry) referenced from workqueue.o(i.rt_workqueue_create)
 <LI><a href="#[15]">_write_10</a> from mstorage.o(i._write_10) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[133]">adc</a> from adc.o(i.adc) referenced from adc.o(FSymTab)
 <LI><a href="#[f0]">at32_adc_enabled</a> from drv_adc.o(i.at32_adc_enabled) referenced from drv_adc.o(.constdata)
 <LI><a href="#[e2]">at32_configure</a> from drv_usart.o(i.at32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[e3]">at32_control</a> from drv_usart.o(i.at32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[f1]">at32_get_adc_value</a> from drv_adc.o(i.at32_get_adc_value) referenced from drv_adc.o(.constdata)
 <LI><a href="#[ee]">at32_get_scl</a> from drv_soft_i2c.o(i.at32_get_scl) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[ed]">at32_get_sda</a> from drv_soft_i2c.o(i.at32_get_sda) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[e5]">at32_getc</a> from drv_usart.o(i.at32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[df]">at32_pin_attach_irq</a> from drv_gpio.o(i.at32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[e0]">at32_pin_dettach_irq</a> from drv_gpio.o(i.at32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[e1]">at32_pin_irq_enable</a> from drv_gpio.o(i.at32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[dc]">at32_pin_mode</a> from drv_gpio.o(i.at32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[de]">at32_pin_read</a> from drv_gpio.o(i.at32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[dd]">at32_pin_write</a> from drv_gpio.o(i.at32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[e4]">at32_putc</a> from drv_usart.o(i.at32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[ec]">at32_set_scl</a> from drv_soft_i2c.o(i.at32_set_scl) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[eb]">at32_set_sda</a> from drv_soft_i2c.o(i.at32_set_sda) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[e9]">at32_timer_counter_get</a> from drv_hwtimer.o(i.at32_timer_counter_get) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[ea]">at32_timer_ctrl</a> from drv_hwtimer.o(i.at32_timer_ctrl) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[e6]">at32_timer_init</a> from drv_hwtimer.o(i.at32_timer_init) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[e7]">at32_timer_start</a> from drv_hwtimer.o(i.at32_timer_start) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[e8]">at32_timer_stop</a> from drv_hwtimer.o(i.at32_timer_stop) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[ef]">at32_udelay</a> from drv_soft_i2c.o(i.at32_udelay) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[146]">cat</a> from dfs_file.o(i.cat) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[14b]">chdir</a> from dfs_posix.o(i.chdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[14d]">clear</a> from cmd.o(i.clear) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[160]">cmd_cat</a> from msh_file.o(i.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[162]">cmd_cd</a> from msh_file.o(i.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[15e]">cmd_cp</a> from msh_file.o(i.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[166]">cmd_df</a> from msh_file.o(i.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[167]">cmd_echo</a> from msh_file.o(i.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[15c]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[15d]">cmd_ls</a> from msh_file.o(i.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[164]">cmd_mkdir</a> from msh_file.o(i.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[165]">cmd_mkfs</a> from msh_file.o(i.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[15f]">cmd_mv</a> from msh_file.o(i.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[171]">cmd_ping</a> from ping.o(i.cmd_ping) referenced from ping.o(FSymTab)
 <LI><a href="#[15b]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[163]">cmd_pwd</a> from msh_file.o(i.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[161]">cmd_rm</a> from msh_file.o(i.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[4]">configure</a> from drv_spi.o(i.configure) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[147]">copy</a> from dfs_file.o(i.copy) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[134]">dac</a> from dac.o(i.dac) referenced from dac.o(FSymTab)
 <LI><a href="#[141]">date</a> from rtc.o(i.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[149]">df</a> from dfs_fs.o(i.df) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[f3]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[f7]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[f4]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[f9]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[f2]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[f8]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[f5]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[fa]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[f6]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[fc]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[100]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[102]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fd]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[101]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[105]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[103]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fb]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[fe]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[109]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[108]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[106]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[107]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[104]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ff]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[121]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[10c]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[10d]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[7a]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_inc_pcb_refcount)
 <LI><a href="#[7b]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_random_port)
 <LI><a href="#[10f]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[3]">drv_pwm_control</a> from drv_pwm.o(i.drv_pwm_control) referenced 2 times from drv_pwm.o(.data)
 <LI><a href="#[129]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[85]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[85]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[7e]">eth_rx_thread_entry</a> from ethernetif.o(i.eth_rx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[7f]">eth_tx_thread_entry</a> from ethernetif.o(i.eth_tx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[93]">etharp_output</a> from etharp.o(i.etharp_output) referenced from sys_arch.o(i.netif_device_init)
 <LI><a href="#[10b]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[d7]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[87]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[169]">findMe</a> from hello.o(i.findMe) referenced from hello.o(FSymTab)
 <LI><a href="#[80]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[12b]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[81]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[14c]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[168]">hello_func</a> from hello.o(i.hello_func) referenced from hello.o(FSymTab)
 <LI><a href="#[12c]">hello_init</a> from hello.o(i.hello_init) referenced from hello.o(.rti_fn.6)
 <LI><a href="#[c0]">hid_thread_entry</a> from hid.o(i.hid_thread_entry) referenced from hid.o(i.rt_usb_hid_init)
 <LI><a href="#[db]">i2c_bit_xfer</a> from i2c-bit-ops.o(i.i2c_bit_xfer) referenced from i2c-bit-ops.o(.constdata)
 <LI><a href="#[b6]">i2c_bus_device_control</a> from i2c_dev.o(i.i2c_bus_device_control) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[b4]">i2c_bus_device_read</a> from i2c_dev.o(i.i2c_bus_device_read) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[b5]">i2c_bus_device_write</a> from i2c_dev.o(i.i2c_bus_device_write) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[10e]">igmp_tmr</a> from igmp.o(i.igmp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[d8]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[12a]">libc_system_init</a> from libc.o(i.libc_system_init) referenced from libc.o(.rti_fn.4)
 <LI><a href="#[159]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[13e]">list_date</a> from rtc.o(i.list_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[158]">list_device</a> from cmd.o(i.list_device) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[151]">list_event</a> from cmd.o(i.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[143]">list_fd</a> from dfs.o(i.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[16d]">list_if</a> from ethernetif.o(i.list_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[153]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[16a]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[155]">list_memheap</a> from cmd.o(i.list_memheap) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[156]">list_mempool</a> from cmd.o(i.list_mempool) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[154]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[152]">list_mutex</a> from cmd.o(i.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[150]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[16e]">list_tcps</a> from ethernetif.o(i.list_tcps) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[14f]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[157]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[16f]">list_udps</a> from ethernetif.o(i.list_udps) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[144]">ls</a> from dfs_file.o(i.ls) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[82]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.lwip_cyclic_timer)
 <LI><a href="#[82]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[89]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[8e]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_prepare_delete)
 <LI><a href="#[86]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[8a]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[8b]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[8c]">lwip_netconn_do_join_leave_group</a> from api_msg.o(i.lwip_netconn_do_join_leave_group) referenced from api_lib.o(i.netconn_join_leave_group)
 <LI><a href="#[8d]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[90]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_tcp_recvd_msg)
 <LI><a href="#[8f]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[91]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_vectors_partly)
 <LI><a href="#[122]">lwip_system_init</a> from sys_arch.o(i.lwip_system_init) referenced from sys_arch.o(.rti_fn.2)
 <LI><a href="#[98]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[14a]">mkdir</a> from dfs_posix.o(i.mkdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[148]">mkfs</a> from dfs_fs.o(i.mkfs) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[15a]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[d6]">netif_device_init</a> from sys_arch.o(i.netif_device_init) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[92]">netif_null_output_ip4</a> from netif.o(i.netif_null_output_ip4) referenced from netif.o(i.netif_add)
 <LI><a href="#[7d]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[7c]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[94]">netifapi_do_netif_common</a> from netifapi.o(i.netifapi_do_netif_common) referenced from netifapi.o(i.netifapi_netif_common)
 <LI><a href="#[95]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[170]">ping</a> from ping.o(i.ping) referenced from ping.o(FSymTab)
 <LI><a href="#[84]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[84]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[138]">pwm_disable</a> from rt_drv_pwm.o(i.pwm_disable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[137]">pwm_enable</a> from rt_drv_pwm.o(i.pwm_enable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[139]">pwm_set</a> from rt_drv_pwm.o(i.pwm_set) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[96]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[cd]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[97]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[d1]">retry_delay_100us</a> from spi_flash_sfud.o(i.retry_delay_100us) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[145]">rm</a> from dfs_file.o(i.rm) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[11e]">rt_hw_adc_init</a> from drv_adc.o(i.rt_hw_adc_init) referenced from drv_adc.o(.rti_fn.1)
 <LI><a href="#[11b]">rt_hw_hwtimer_init</a> from drv_hwtimer.o(i.rt_hw_hwtimer_init) referenced from drv_hwtimer.o(.rti_fn.1)
 <LI><a href="#[11d]">rt_hw_i2c_init</a> from drv_soft_i2c.o(i.rt_hw_i2c_init) referenced from drv_soft_i2c.o(.rti_fn.1)
 <LI><a href="#[117]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[11a]">rt_hw_pwm_init</a> from drv_pwm.o(i.rt_hw_pwm_init) referenced from drv_pwm.o(.rti_fn.1)
 <LI><a href="#[127]">rt_hw_rtc_init</a> from drv_rtc.o(i.rt_hw_rtc_init) referenced from drv_rtc.o(.rti_fn.3)
 <LI><a href="#[11c]">rt_hw_spi_init</a> from drv_spi.o(i.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[119]">rt_hw_usart_init</a> from drv_usart.o(i.rt_hw_usart_init) referenced from drv_usart.o(.rti_fn.1)
 <LI><a href="#[118]">rt_hw_wdt_init</a> from drv_wdt.o(i.rt_hw_wdt_init) referenced from drv_wdt.o(.rti_fn.1)
 <LI><a href="#[9b]">rt_hwtimer_close</a> from hwtimer.o(i.rt_hwtimer_close) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[9e]">rt_hwtimer_control</a> from hwtimer.o(i.rt_hwtimer_control) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[99]">rt_hwtimer_init</a> from hwtimer.o(i.rt_hwtimer_init) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[9a]">rt_hwtimer_open</a> from hwtimer.o(i.rt_hwtimer_open) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[9c]">rt_hwtimer_read</a> from hwtimer.o(i.rt_hwtimer_read) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[9d]">rt_hwtimer_write</a> from hwtimer.o(i.rt_hwtimer_write) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[128]">rt_i2c_core_init</a> from i2c_core.o(i.rt_i2c_core_init) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[132]">rt_pin_get</a> from pin.o(i.rt_pin_get) referenced from pin.o(FSymTab)
 <LI><a href="#[12f]">rt_pin_mode</a> from pin.o(i.rt_pin_mode) referenced from pin.o(FSymTab)
 <LI><a href="#[131]">rt_pin_read</a> from pin.o(i.rt_pin_read) referenced from pin.o(FSymTab)
 <LI><a href="#[130]">rt_pin_write</a> from pin.o(i.rt_pin_write) referenced from pin.o(FSymTab)
 <LI><a href="#[13d]">rt_pm_dump_status</a> from pm.o(i.rt_pm_dump_status) referenced 2 times from pm.o(FSymTab)
 <LI><a href="#[13a]">rt_pm_release_mode</a> from pm.o(i.rt_pm_release_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[13b]">rt_pm_request_mode</a> from pm.o(i.rt_pm_request_mode) referenced from pm.o(FSymTab)
 <LI><a href="#[13c]">rt_pm_run_mode_switch</a> from pm.o(i.rt_pm_run_mode_switch) referenced from pm.o(FSymTab)
 <LI><a href="#[135]">rt_pwm_enable</a> from rt_drv_pwm.o(i.rt_pwm_enable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[136]">rt_pwm_set</a> from rt_drv_pwm.o(i.rt_pwm_set) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[a7]">rt_rtc_control</a> from drv_rtc.o(i.rt_rtc_control) referenced from drv_rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[aa]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ad]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[a8]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[a9]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ab]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ac]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b9]">rt_sfud_control</a> from spi_flash_sfud.o(i.rt_sfud_control) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[b7]">rt_sfud_read</a> from spi_flash_sfud.o(i.rt_sfud_read) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[b8]">rt_sfud_write</a> from spi_flash_sfud.o(i.rt_sfud_write) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[78]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[be]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[79]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[bd]">rt_thread_timer_entry</a> from timer.o(i.rt_thread_timer_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[11f]">rt_usbd_class_list_init</a> from usbdevice.o(i.rt_usbd_class_list_init) referenced from usbdevice.o(.rti_fn.1)
 <LI><a href="#[8]">rt_usbd_function_cdc_create</a> from cdc_vcom.o(i.rt_usbd_function_cdc_create) referenced 2 times from cdc_vcom.o(.data)
 <LI><a href="#[b]">rt_usbd_function_hid_create</a> from hid.o(i.rt_usbd_function_hid_create) referenced 2 times from hid.o(.data)
 <LI><a href="#[19]">rt_usbd_function_mstorage_create</a> from mstorage.o(i.rt_usbd_function_mstorage_create) referenced 2 times from mstorage.o(.data)
 <LI><a href="#[124]">rt_usbd_hid_class_register</a> from hid.o(i.rt_usbd_hid_class_register) referenced from hid.o(.rti_fn.2)
 <LI><a href="#[125]">rt_usbd_msc_class_register</a> from mstorage.o(i.rt_usbd_msc_class_register) referenced from mstorage.o(.rti_fn.2)
 <LI><a href="#[123]">rt_usbd_vcom_class_register</a> from cdc_vcom.o(i.rt_usbd_vcom_class_register) referenced from cdc_vcom.o(.rti_fn.2)
 <LI><a href="#[b0]">rt_watchdog_close</a> from watchdog.o(i.rt_watchdog_close) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[b1]">rt_watchdog_control</a> from watchdog.o(i.rt_watchdog_control) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[ae]">rt_watchdog_init</a> from watchdog.o(i.rt_watchdog_init) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[af]">rt_watchdog_open</a> from watchdog.o(i.rt_watchdog_open) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[126]">rt_work_sys_workqueue_init</a> from workqueue.o(i.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.3)
 <LI><a href="#[120]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[116]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[12d]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[115]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[83]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[83]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[da]">serialThread</a> from uarttest.o(i.serialThread) referenced from uarttest.o(i.uart2_test)
 <LI><a href="#[13f]">set_date</a> from rtc.o(i.set_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[16c]">set_dns</a> from ethernetif.o(i.set_dns) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[16b]">set_if</a> from ethernetif.o(i.set_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[140]">set_time</a> from rtc.o(i.set_time) referenced from rtc.o(FSymTab)
 <LI><a href="#[142]">sf</a> from spi_flash_sfud.o(i.sf) referenced from spi_flash_sfud.o(FSymTab)
 <LI><a href="#[cf]">spi_lock</a> from spi_flash_sfud.o(i.spi_lock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[d0]">spi_unlock</a> from spi_flash_sfud.o(i.spi_unlock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[ce]">spi_write_read</a> from spi_flash_sfud.o(i.spi_write_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[d2]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[10a]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[88]">tcpip_init_done_callback</a> from sys_arch.o(i.tcpip_init_done_callback) referenced from sys_arch.o(i.lwip_system_init)
 <LI><a href="#[d5]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[d3]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[d3]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[d4]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[12e]">uart2_test</a> from uarttest.o(i.uart2_test) referenced from uarttest.o(FSymTab)
 <LI><a href="#[d9]">uartRX</a> from uarttest.o(i.uartRX) referenced from uarttest.o(i.uart2_test)
 <LI><a href="#[c1]">vcom_tx_thread_entry</a> from cdc_vcom.o(i.vcom_tx_thread_entry) referenced from cdc_vcom.o(i.rt_usb_vcom_init)
 <LI><a href="#[14e]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[b3]">wdt_control</a> from drv_wdt.o(i.wdt_control) referenced from drv_wdt.o(i.rt_hw_wdt_init)
 <LI><a href="#[b2]">wdt_init</a> from drv_wdt.o(i.wdt_init) referenced from drv_wdt.o(i.rt_hw_wdt_init)
 <LI><a href="#[5]">xfer</a> from drv_spi.o(i.xfer) referenced 2 times from drv_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[172]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[173]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[175]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[54b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[54c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[54d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[54e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[54f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[193]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[176]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[550]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[182]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[178]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[551]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[552]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[553]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[554]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[555]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[556]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[557]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[558]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[559]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[55a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[55b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[55c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[55d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[55e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[55f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[560]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[561]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[562]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[563]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[564]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[565]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[566]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[567]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[568]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[569]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[56a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[56b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[174]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[17f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[181]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[56d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[183]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[56e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[186]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[56f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[188]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[2be]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1d7]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_enter_critical
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_reset_state
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_putc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_getc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[1d9]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_reset_state
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_putc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_getc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[4ac]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[4ad]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4c5]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[570]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TMR8_OV_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TMR8_TRG_COM_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f407vgt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f407vgt7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[571]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[572]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[573]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[18c]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[18e]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[18f]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[192]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1a2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[194]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_mode_switch
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request_mode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[196]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[198]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[17b]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[41d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[338]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[35e]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[1e9]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[25f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
</UL>

<P><STRONG><a name="[2ac]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[360]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[300]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[199]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[574]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[575]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_init_raw
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[19d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[19c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[578]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[579]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[19f]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[224]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[57a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[57b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[57c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[57d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[191]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[74]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[177]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[197]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[57f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[580]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[180]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[185]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[184]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[232]"></a>ADC_Ctrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[236]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[23e]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[23d]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[234]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[22f]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, at32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[231]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, at32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[233]"></a>ADC_RstCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_RstCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[23c]"></a>ADC_SoftwareStartConvCtrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_SoftwareStartConvCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[235]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[22e]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[4a6]"></a>BKP_ReadBackupReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at32f4xx_bkp.o(i.BKP_ReadBackupReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[4f1]"></a>BKP_WriteBackupReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at32f4xx_bkp.o(i.BKP_WriteBackupReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[2a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>EXTI_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>EXTI_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[24c]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[24d]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, at32f4xx_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[1aa]"></a>GPIO_EXTI_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_gpio.o(i.GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
</UL>

<P><STRONG><a name="[24a]"></a>GPIO_PinsRemapConfig</STRONG> (Thumb, 1388 bytes, Stack size 20 bytes, at32f4xx_gpio.o(i.GPIO_PinsRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinsRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
</UL>

<P><STRONG><a name="[24f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_read
</UL>

<P><STRONG><a name="[546]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[54a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[244]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
</UL>

<P><STRONG><a name="[250]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_write
</UL>

<P><STRONG><a name="[1af]"></a>HID_Report_Received</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hid.o(i.HID_Report_Received))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HID_Report_Received &rArr; dump_report &rArr; dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_thread_entry
</UL>

<P><STRONG><a name="[545]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[542]"></a>IWDG_KeyRegWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_KeyRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[541]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[543]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[544]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[23a]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[4a1]"></a>PWR_BackupAccessCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_pwr.o(i.PWR_BackupAccessCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[247]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_hwtmr_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
</UL>

<P><STRONG><a name="[1c7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
</UL>

<P><STRONG><a name="[243]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
</UL>

<P><STRONG><a name="[1c6]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
</UL>

<P><STRONG><a name="[1c4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
</UL>

<P><STRONG><a name="[4a9]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
</UL>

<P><STRONG><a name="[4a8]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
</UL>

<P><STRONG><a name="[4a3]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[4a2]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[1bb]"></a>RCC_StepModeCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_StepModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo200M
</UL>

<P><STRONG><a name="[1b2]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[1b3]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[375]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>

<P><STRONG><a name="[1b1]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f4xx_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[1b4]"></a>RTC_SetDIV</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, at32f4xx_rtc.o(i.RTC_SetDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetDIV
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[4a5]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[4a4]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[275]"></a>SPI_CRCEN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_CRCEN))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[274]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[547]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[549]"></a>SPI_I2S_RxData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_RxData))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[548]"></a>SPI_I2S_TxData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[273]"></a>SPI_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, at32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>SystemClock_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClock_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo200M
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_hwtimer.o(i.TMR3_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR3_GLOBAL_IRQHandler &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_hwtimer.o(i.TMR4_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR4_GLOBAL_IRQHandler &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_hwtimer.o(i.TMR5_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR5_GLOBAL_IRQHandler &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[31b]"></a>TMR_ARPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ARPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[310]"></a>TMR_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, at32f4xx_tim.o(i.TMR_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[1c1]"></a>TMR_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[258]"></a>TMR_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[31c]"></a>TMR_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[252]"></a>TMR_DIVConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_DIVConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
</UL>

<P><STRONG><a name="[1bf]"></a>TMR_GetINTStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at32f4xx_tim.o(i.TMR_GetINTStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_GetINTStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[254]"></a>TMR_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[313]"></a>TMR_OC1Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[314]"></a>TMR_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[315]"></a>TMR_OC2Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[316]"></a>TMR_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[317]"></a>TMR_OC3Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[318]"></a>TMR_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[319]"></a>TMR_OC4Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[31a]"></a>TMR_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[312]"></a>TMR_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[257]"></a>TMR_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[256]"></a>TMR_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[255]"></a>TMR_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[253]"></a>TMR_TimeBaseInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[311]"></a>TMR_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[49]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = USART1_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = USART2_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f407vgt7.o(RESET)
</UL>
<P><STRONG><a name="[540]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[53f]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[239]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[23f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[53e]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[23b]"></a>USART_INTConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, at32f4xx_usart.o(i.USART_INTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
</UL>

<P><STRONG><a name="[1c3]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, at32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[240]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[1c5]"></a>USART_Reset</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[251]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
</UL>

<P><STRONG><a name="[238]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[378]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[1fc]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(i._rt_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[189]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stubs.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[22a]"></a>asctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asctime &rArr; asctime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[22b]"></a>asctime_r</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, time.o(i.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asctime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[22d]"></a>at32_msp_adc_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_msp_adc_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[246]"></a>at32_msp_hwtmr_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_hwtmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at32_msp_hwtmr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[248]"></a>at32_msp_spi_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_msp_spi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[249]"></a>at32_msp_tmr_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_tmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_msp_tmr_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[237]"></a>at32_msp_usart_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_msp_usart_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinsRemapConfig
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[146]"></a>cat</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[14b]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[267]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[262]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[160]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[162]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[15e]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[166]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(i.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[167]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(i.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = cmd_echo &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[15c]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[15d]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(i.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[164]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[165]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(i.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[15f]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = cmd_mv &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[171]"></a>cmd_ping</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ping.o(i.cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = cmd_ping &rArr; ping &rArr; lwip_ping_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(FSymTab)
</UL>
<P><STRONG><a name="[15b]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[163]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(i.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[161]"></a>cmd_rm</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = cmd_rm &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[147]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[282]"></a>ctime</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, time.o(i.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ctime &rArr; localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[28b]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[149]"></a>df</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[f3]"></a>dfs_device_fs_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>dfs_device_fs_open</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>dfs_device_fs_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>dfs_device_fs_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>dfs_elm_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>dfs_elm_getdents</STRONG> (Thumb, 222 bytes, Stack size 320 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>dfs_elm_ioctl</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>dfs_elm_lseek</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dfs_elm_lseek &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>dfs_elm_mkfs</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>dfs_elm_mount</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = dfs_elm_mount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>dfs_elm_open</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>dfs_elm_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>dfs_elm_rename</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>dfs_elm_stat</STRONG> (Thumb, 254 bytes, Stack size 384 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>dfs_elm_statfs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>dfs_elm_unlink</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>dfs_elm_unmount</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>dfs_elm_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[353]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(i.dfs_fdtable_get))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[25c]"></a>dfs_file_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[279]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[45b]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[25a]"></a>dfs_file_open</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[25b]"></a>dfs_file_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[2a9]"></a>dfs_file_rename</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[276]"></a>dfs_file_stat</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[2aa]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[27a]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[2a6]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[121]"></a>dfs_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[25d]"></a>dfs_lock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[26c]"></a>dfs_mkfs</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[2ae]"></a>dfs_mount</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[260]"></a>dfs_normalize_path</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[28c]"></a>dfs_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
</UL>

<P><STRONG><a name="[28d]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[2a7]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[25e]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[2b1]"></a>dhcp_arp_reply</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[10c]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>dhcp_fine_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[2d5]"></a>dhcp_network_changed</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[2b8]"></a>dhcp_release_and_stop</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_release_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2de]"></a>dhcp_renew</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[2b9]"></a>dhcp_start</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2dd]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>

<P><STRONG><a name="[34a]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[2ef]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[2f0]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[35b]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2f1]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[301]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[3bf]"></a>dns_getserver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dns.o(i.dns_getserver))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[3d3]"></a>dns_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2cc]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[10f]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[129]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[3c5]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[325]"></a>eth_system_device_init_private</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ethernetif.o(i.eth_system_device_init_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[32c]"></a>etharp_input</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[93]"></a>etharp_output</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.netif_device_init)
</UL>
<P><STRONG><a name="[2b7]"></a>etharp_query</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[332]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[10b]"></a>etharp_tmr</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>ethernet_input</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[331]"></a>ethernet_output</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[291]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[2a3]"></a>f_getfree</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = f_getfree &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[296]"></a>f_lseek</STRONG> (Thumb, 870 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[29d]"></a>f_mkdir</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = f_mkdir &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[29a]"></a>f_mkfs</STRONG> (Thumb, 1702 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[299]"></a>f_mount</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[29e]"></a>f_open</STRONG> (Thumb, 564 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = f_open &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[29b]"></a>f_opendir</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = f_opendir &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[29f]"></a>f_read</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[294]"></a>f_readdir</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = f_readdir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[2a0]"></a>f_rename</STRONG> (Thumb, 322 bytes, Stack size 160 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = f_rename &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[297]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[2a1]"></a>f_stat</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = f_stat &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[293]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[295]"></a>f_truncate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = f_truncate &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[2a4]"></a>f_unlink</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = f_unlink &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[2a5]"></a>f_write</STRONG> (Thumb, 632 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[268]"></a>fd_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[2ab]"></a>fd_is_open</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dfs.o(i.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[354]"></a>fd_new</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[269]"></a>fd_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(i.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[27f]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[34d]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfs_elm.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[34c]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[341]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[348]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[357]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[358]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[272]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[169]"></a>findMe</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hello.o(i.findMe))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = findMe &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello.o(FSymTab)
</UL>
<P><STRONG><a name="[35c]"></a>finsh_get_prompt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[363]"></a>finsh_set_device</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[365]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[366]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[12b]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[81]"></a>finsh_thread_entry</STRONG> (Thumb, 1276 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[343]"></a>get_fattime</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[35f]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[377]"></a>gmtime_r</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[14c]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[168]"></a>hello_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hello.o(i.hello_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello_func &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello.o(FSymTab)
</UL>
<P><STRONG><a name="[12c]"></a>hello_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hello.o(i.hello_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[393]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[395]"></a>icmp_input</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3d2]"></a>igmp_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(i.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[39d]"></a>igmp_input</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3a1]"></a>igmp_joingroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[3a2]"></a>igmp_joingroup_netif</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, igmp.o(i.igmp_joingroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[3a5]"></a>igmp_leavegroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[3a6]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, igmp.o(i.igmp_leavegroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[39e]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[3a8]"></a>igmp_report_groups</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[3a9]"></a>igmp_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[10e]"></a>igmp_tmr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[398]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[396]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[3ac]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[32f]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[d8]"></a>ip4_input</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[399]"></a>ip4_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[3a0]"></a>ip4_output_if_opt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, ip4.o(i.ip4_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>

<P><STRONG><a name="[3b3]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_opt_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[3b4]"></a>ip4_output_if_src</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[39a]"></a>ip4_route</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[302]"></a>ip4addr_aton</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3b5]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3b6]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[3b7]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[3b8]"></a>libc_stdio_set_console</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stdio.o(i.libc_stdio_set_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = libc_stdio_set_console &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[12a]"></a>libc_system_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libc.o(i.libc_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = libc_system_init &rArr; libc_stdio_set_console &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libc.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[159]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13e]"></a>list_date</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc.o(i.list_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = list_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[158]"></a>list_device</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[151]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[143]"></a>list_fd</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dfs.o(i.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[16d]"></a>list_if</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, ethernetif.o(i.list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = list_if &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[153]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16a]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[155]"></a>list_memheap</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[156]"></a>list_mempool</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[154]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[152]"></a>list_mutex</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[150]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16e]"></a>list_tcps</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, ethernetif.o(i.list_tcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[14f]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[157]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16f]"></a>list_udps</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ethernetif.o(i.list_udps))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[283]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[3c1]"></a>localtime_r</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, time.o(i.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[144]"></a>ls</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[3c2]"></a>lwip_close</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3c8]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3c9]"></a>lwip_getaddrinfo</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[2bf]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[304]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[3cb]"></a>lwip_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[89]"></a>lwip_netconn_do_close</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[8e]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_prepare_delete)
</UL>
<P><STRONG><a name="[8a]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[8b]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[8c]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_join_leave_group)
</UL>
<P><STRONG><a name="[8d]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[90]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_tcp_recvd_msg)
</UL>
<P><STRONG><a name="[8f]"></a>lwip_netconn_do_send</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[91]"></a>lwip_netconn_do_write</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_vectors_partly)
</UL>
<P><STRONG><a name="[3ed]"></a>lwip_netconn_is_err_msg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_is_err_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lwip_netconn_is_err_msg &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[3ee]"></a>lwip_ping_recv</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, ping.o(i.lwip_ping_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = lwip_ping_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3f0]"></a>lwip_ping_send</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ping.o(i.lwip_ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = lwip_ping_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3ef]"></a>lwip_recvfrom</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>

<P><STRONG><a name="[3fc]"></a>lwip_send</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[3f2]"></a>lwip_sendto</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[401]"></a>lwip_setsockopt</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[40a]"></a>lwip_socket</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3ab]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[2ff]"></a>lwip_strnicmp</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[122]"></a>lwip_system_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, sys_arch.o(i.lwip_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[40f]"></a>$Super$$main</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[98]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[412]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[3cd]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2df]"></a>mem_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = mem_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[413]"></a>mem_overflow_check_raw</STRONG> (Thumb, 148 bytes, Stack size 160 bytes, sys_arch.o(i.mem_overflow_check_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
</UL>

<P><STRONG><a name="[414]"></a>mem_overflow_init_raw</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sys_arch.o(i.mem_overflow_init_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mem_overflow_init_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>

<P><STRONG><a name="[44b]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[337]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3ce]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = memp_init &rArr; memp_init_pool &rArr; memp_overflow_init_element &rArr; mem_overflow_init_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[415]"></a>memp_init_pool</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = memp_init_pool &rArr; memp_overflow_init_element &rArr; mem_overflow_init_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[336]"></a>memp_malloc_fn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[14a]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[148]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(i.mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[2a2]"></a>mktime</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, time.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[417]"></a>msh_auto_complete</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[418]"></a>msh_auto_complete_path</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, msh.o(i.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[36e]"></a>msh_exec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[41c]"></a>msh_exec_script</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, msh_file.o(i.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[15a]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[35d]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[372]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>

<P><STRONG><a name="[400]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[3fe]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[420]"></a>netconn_alloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[373]"></a>netconn_delete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>

<P><STRONG><a name="[3e6]"></a>netconn_err</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_lib.o(i.netconn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = netconn_err &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[428]"></a>netconn_free</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[3f8]"></a>netconn_getaddr</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
</UL>

<P><STRONG><a name="[3ca]"></a>netconn_gethostbyname</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[40c]"></a>netconn_join_leave_group</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, api_lib.o(i.netconn_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[40b]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[3c4]"></a>netconn_prepare_delete</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, api_lib.o(i.netconn_prepare_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[3f4]"></a>netconn_recv_tcp_pbuf_flags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[3fb]"></a>netconn_recv_udp_raw_netbuf_flags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_udp_raw_netbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = netconn_recv_udp_raw_netbuf_flags &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
</UL>

<P><STRONG><a name="[3ff]"></a>netconn_send</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[3f6]"></a>netconn_tcp_recvd</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, api_lib.o(i.netconn_tcp_recvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = netconn_tcp_recvd &rArr; netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[3fd]"></a>netconn_write_partly</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = netconn_write_partly &rArr; netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[430]"></a>netconn_write_vectors_partly</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, api_lib.o(i.netconn_write_vectors_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[431]"></a>netif_add</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[404]"></a>netif_find</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, netif.o(i.netif_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[455]"></a>netif_get_by_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, netif.o(i.netif_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[3cf]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2b5]"></a>netif_set_addr</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[536]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[43b]"></a>netif_set_gw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netif_set_gw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[43c]"></a>netif_set_ipaddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[7d]"></a>netif_set_link_down</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netif_set_link_down &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[7c]"></a>netif_set_link_up</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[43d]"></a>netif_set_netmask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netif_set_netmask &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[43e]"></a>netif_set_up</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[324]"></a>netifapi_netif_common</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[26a]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[261]"></a>opendir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[33a]"></a>pbuf_add_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2bd]"></a>pbuf_alloc</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[441]"></a>pbuf_alloc_reference</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[444]"></a>pbuf_cat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[445]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[511]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[334]"></a>pbuf_clone</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[397]"></a>pbuf_copy</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2da]"></a>pbuf_copy_partial</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[2c7]"></a>pbuf_free</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[3f5]"></a>pbuf_free_header</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = pbuf_free_header &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[3b2]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[307]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[2d8]"></a>pbuf_realloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>

<P><STRONG><a name="[335]"></a>pbuf_ref</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[339]"></a>pbuf_remove_header</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = pbuf_remove_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[44a]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[306]"></a>pbuf_take</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[308]"></a>pbuf_take_at</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[2fc]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[170]"></a>ping</STRONG> (Thumb, 320 bytes, Stack size 112 bytes, ping.o(i.ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100 + Unknown Stack Size
<LI>Call Chain = ping &rArr; lwip_ping_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(FSymTab)
</UL>
<P><STRONG><a name="[407]"></a>raw_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, raw.o(i.raw_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[3af]"></a>raw_input</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[436]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[454]"></a>raw_new</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[44d]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[44e]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[3e3]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[3e7]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[3e8]"></a>raw_sendto</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[456]"></a>raw_sendto_if_src</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, raw.o(i.raw_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[41f]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
</UL>

<P><STRONG><a name="[41a]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[270]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[41b]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(i.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[145]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(i.rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[227]"></a>rt_adc_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc.o(i.rt_adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[225]"></a>rt_adc_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc.o(i.rt_adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[226]"></a>rt_adc_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc.o(i.rt_adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[45c]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c8]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_disabled
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_counter_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_10
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_verify_10
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_unit_ready
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_stop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_status
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_request_sense
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_capacity
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_capacities
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_10
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mode_sense_6
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inquiry_cmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbw_verify
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbw_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cb_len_calc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allow_removal
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_tx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_reset_state
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_putc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_cmd_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_set_line_coding
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_get_line_coding
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_set_stall
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_qualifier
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>

<P><STRONG><a name="[352]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1d3]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
</UL>

<P><STRONG><a name="[45f]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
</UL>

<P><STRONG><a name="[20f]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
</UL>

<P><STRONG><a name="[47c]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[411]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[369]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[462]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[286]"></a>rt_dac_disabled</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dac.o(i.rt_dac_disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dac_disabled &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
</UL>

<P><STRONG><a name="[284]"></a>rt_dac_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dac.o(i.rt_dac_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dac_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
</UL>

<P><STRONG><a name="[285]"></a>rt_dac_write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, dac.o(i.rt_dac_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dac_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
</UL>

<P><STRONG><a name="[463]"></a>rt_data_queue_deinit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[465]"></a>rt_data_queue_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[467]"></a>rt_data_queue_peak</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[468]"></a>rt_data_queue_pop</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[20b]"></a>rt_data_queue_push</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[464]"></a>rt_data_queue_reset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_data_queue_reset &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[1e1]"></a>rt_device_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
</UL>

<P><STRONG><a name="[1e5]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
</UL>

<P><STRONG><a name="[1e3]"></a>rt_device_find</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
</UL>

<P><STRONG><a name="[1c0]"></a>rt_device_hwtimer_isr</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hwtimer.o(i.rt_device_hwtimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[46d]"></a>rt_device_hwtimer_register</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hwtimer.o(i.rt_device_hwtimer_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[432]"></a>rt_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(i.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
</UL>

<P><STRONG><a name="[1e4]"></a>rt_device_open</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
</UL>

<P><STRONG><a name="[46f]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[470]"></a>rt_device_pwm_register</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.rt_device_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_device_pwm_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pwm_init
</UL>

<P><STRONG><a name="[1d6]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRX
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_10
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
</UL>

<P><STRONG><a name="[46e]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
</UL>

<P><STRONG><a name="[364]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[472]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[1de]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialThread
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[21b]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
</UL>

<P><STRONG><a name="[476]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(i.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
</UL>

<P><STRONG><a name="[217]"></a>rt_event_recv</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
</UL>

<P><STRONG><a name="[215]"></a>rt_event_send</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_putc
</UL>

<P><STRONG><a name="[21e]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
</UL>

<P><STRONG><a name="[1e0]"></a>rt_free</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
</UL>

<P><STRONG><a name="[47a]"></a>rt_hw_adc_register</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, adc.o(i.rt_hw_adc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_hw_adc_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
</UL>

<P><STRONG><a name="[47b]"></a>rt_hw_board_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[48d]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[18a]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[11d]"></a>rt_hw_i2c_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.rt_hw_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_gpio_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_bus_unlock
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[117]"></a>rt_hw_pin_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[127]"></a>rt_hw_rtc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_hw_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_hw_rtc_init &rArr; rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[1da]"></a>rt_hw_serial_isr</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_tx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[482]"></a>rt_hw_serial_register</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
</UL>

<P><STRONG><a name="[11c]"></a>rt_hw_spi_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_spi.o(i.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_hw_spi_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[201]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[119]"></a>rt_hw_usart_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[484]"></a>rt_hw_watchdog_register</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, watchdog.o(i.rt_hw_watchdog_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
</UL>

<P><STRONG><a name="[118]"></a>rt_hw_wdt_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, drv_wdt.o(i.rt_hw_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_hw_wdt_init &rArr; rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[47e]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.rt_i2c_bit_add_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[487]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c_dev.o(i.rt_i2c_bus_device_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[486]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_core.o(i.rt_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[128]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(i.rt_i2c_core_init))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[38d]"></a>rt_i2c_master_recv</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[38e]"></a>rt_i2c_master_send</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[38c]"></a>rt_i2c_transfer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, i2c_core.o(i.rt_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>

<P><STRONG><a name="[1a9]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fd]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1ab]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_dump_status
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pwm_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello_func
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findMe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_10
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbw_verify
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cb_len_calc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
</UL>

<P><STRONG><a name="[1e2]"></a>rt_malloc</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
</UL>

<P><STRONG><a name="[48e]"></a>rt_mb_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[491]"></a>rt_mb_delete</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[326]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[323]"></a>rt_mb_recv</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[492]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[493]"></a>rt_mb_send_wait</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[1db]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inquiry_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
</UL>

<P><STRONG><a name="[36c]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1eb]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inquiry_cmd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[494]"></a>rt_mq_init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ipc.o(i.rt_mq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_mq_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
</UL>

<P><STRONG><a name="[383]"></a>rt_mq_recv</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_thread_entry
</UL>

<P><STRONG><a name="[1dc]"></a>rt_mq_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[495]"></a>rt_mq_send_wait</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, ipc.o(i.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[355]"></a>rt_mutex_create</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[356]"></a>rt_mutex_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[496]"></a>rt_mutex_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mutex_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[2ad]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[2b0]"></a>rt_mutex_release</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</UL>

<P><STRONG><a name="[2af]"></a>rt_mutex_take</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[48f]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[490]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[474]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[290]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[46b]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[471]"></a>rt_object_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[473]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>

<P><STRONG><a name="[132]"></a>rt_pin_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pin.o(i.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[12f]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_gpio_init
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[131]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_bus_unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_sda
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_scl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[130]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_set_sda
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_set_scl
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_gpio_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_bus_unlock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1f3]"></a>rt_pm_enter_critical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pm.o(i.rt_pm_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pm_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[1f6]"></a>rt_pm_exit_critical</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, pm.o(i.rt_pm_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pm_exit_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[49a]"></a>rt_pm_release</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pm.o(i.rt_pm_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pm_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release_mode
</UL>

<P><STRONG><a name="[49b]"></a>rt_pm_request</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pm.o(i.rt_pm_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pm_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request_mode
</UL>

<P><STRONG><a name="[49c]"></a>rt_pm_run_enter</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pm.o(i.rt_pm_run_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pm_run_enter &rArr; _pm_device_frequency_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_mode_switch
</UL>

<P><STRONG><a name="[452]"></a>rt_pwm_disable</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.rt_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_disable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[135]"></a>rt_pwm_enable</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.rt_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[136]"></a>rt_pwm_set</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rt_drv_pwm.o(i.rt_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[351]"></a>rt_realloc</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, mem.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>

<P><STRONG><a name="[49d]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ringbuffer.o(i.rt_ringbuffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
</UL>

<P><STRONG><a name="[49f]"></a>rt_ringbuffer_get</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ringbuffer.o(i.rt_ringbuffer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
</UL>

<P><STRONG><a name="[213]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ringbuffer.o(i.rt_ringbuffer_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_getc
</UL>

<P><STRONG><a name="[4a0]"></a>rt_ringbuffer_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ringbuffer.o(i.rt_ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
</UL>

<P><STRONG><a name="[1d8]"></a>rt_ringbuffer_put</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ringbuffer.o(i.rt_ringbuffer_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_put &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[214]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ringbuffer.o(i.rt_ringbuffer_putchar_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_putchar_force &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_putc
</UL>

<P><STRONG><a name="[219]"></a>rt_schedule</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[4aa]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[4ab]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[4ae]"></a>rt_sem_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[4af]"></a>rt_sem_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[40e]"></a>rt_sem_detach</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[368]"></a>rt_sem_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[21d]"></a>rt_sem_release</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRX
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>

<P><STRONG><a name="[362]"></a>rt_sem_take</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialThread
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[21c]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[207]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[4b1]"></a>rt_sfud_flash_delete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_sfud_flash_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[4b2]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[4b3]"></a>rt_sfud_flash_probe_ex</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[4b8]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[26e]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[4b9]"></a>rt_soft_timer_check</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[4bc]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[483]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[4b4]"></a>rt_spi_configure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi_core.o(i.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[4bd]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[212]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[4be]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[359]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findMe
</UL>

<P><STRONG><a name="[2a8]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>

<P><STRONG><a name="[581]"></a>strdup</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup), UNUSED)

<P><STRONG><a name="[26d]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[46c]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[28f]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[47d]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4c0]"></a>rt_system_power_manager</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pm.o(i.rt_system_power_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_system_power_manager &rArr; _pm_change_sleep_mode &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_select_sleep_mode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[4c2]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[4c4]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[4c6]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[4c7]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[497]"></a>rt_thread_control</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[367]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[1b7]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[4c9]"></a>rt_thread_delete</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[4c8]"></a>rt_thread_detach</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[78]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[4cd]"></a>rt_thread_idle_excute</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[4cf]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[327]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
</UL>

<P><STRONG><a name="[410]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[45e]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[1fe]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[4ca]"></a>rt_thread_sleep</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[328]"></a>rt_thread_startup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_test
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
</UL>

<P><STRONG><a name="[218]"></a>rt_thread_suspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[79]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[4d0]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1b6]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[1bc]"></a>rt_tick_increase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f8]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(i.rt_tick_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[1f9]"></a>rt_timer_check</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[460]"></a>rt_timer_control</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[4cb]"></a>rt_timer_detach</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[202]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1f7]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.rt_timer_next_timeout_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_next_timeout_tick &rArr; rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[461]"></a>rt_timer_start</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[4d2]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[4d7]"></a>rt_usbd_altsetting_add_endpoint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_altsetting_add_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_altsetting_add_endpoint &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[4d9]"></a>rt_usbd_altsetting_config_descriptor</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_altsetting_config_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_altsetting_config_descriptor &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[4da]"></a>rt_usbd_altsetting_new</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_altsetting_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbd_altsetting_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[11f]"></a>rt_usbd_class_list_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdevice.o(i.rt_usbd_class_list_init))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[4eb]"></a>rt_usbd_class_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbdevice.o(i.rt_usbd_class_register))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_msc_class_register
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_hid_class_register
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_vcom_class_register
</UL>

<P><STRONG><a name="[4dc]"></a>rt_usbd_device_set_qualifier</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_device_set_qualifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_qualifier &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[4dd]"></a>rt_usbd_device_set_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_device_set_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_device_set_string &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[4de]"></a>rt_usbd_endpoint_new</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_endpoint_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbd_endpoint_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[1d0]"></a>rt_usbd_ep0_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, usbdevice_core.o(i.rt_usbd_ep0_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_set_line_coding
</UL>

<P><STRONG><a name="[1ec]"></a>rt_usbd_ep0_set_stall</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbdevice_core.o(i.rt_usbd_ep0_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_usbd_ep0_set_stall &rArr; dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
</UL>

<P><STRONG><a name="[1ce]"></a>rt_usbd_ep0_write</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_ep0_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_get_line_coding
</UL>

<P><STRONG><a name="[1d4]"></a>rt_usbd_ep_set_stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbd_ep_set_stall &rArr; dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
</UL>

<P><STRONG><a name="[4e1]"></a>rt_usbd_find_altsetting</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_find_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_usbd_find_altsetting &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
</UL>

<P><STRONG><a name="[4e2]"></a>rt_usbd_function_add_interface</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_function_add_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_function_add_interface &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[8]"></a>rt_usbd_function_cdc_create</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, cdc_vcom.o(i.rt_usbd_function_cdc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = rt_usbd_function_cdc_create &rArr; rt_usb_vcom_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_get_stored_serno
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_vcom_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_descriptor_config
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_qualifier
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>rt_usbd_function_hid_create</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, hid.o(i.rt_usbd_function_hid_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = rt_usbd_function_hid_create &rArr; rt_usb_hid_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hid_init
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_descriptor_config
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_qualifier
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>rt_usbd_function_mstorage_create</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mstorage.o(i.rt_usbd_function_mstorage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_usbd_function_mstorage_create &rArr; rt_usbd_function_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mstorage_descriptor_config
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_set_altsetting
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_device_set_string
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_config_descriptor
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[4e4]"></a>rt_usbd_function_new</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_function_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_usbd_function_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[124]"></a>rt_usbd_hid_class_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hid.o(i.rt_usbd_hid_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_usbd_hid_class_register
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[4e7]"></a>rt_usbd_interface_add_altsetting</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_interface_add_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usbd_interface_add_altsetting &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[4e5]"></a>rt_usbd_interface_new</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_interface_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_usbd_interface_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[1d2]"></a>rt_usbd_io_request</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_io_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_10
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_status
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_request_sense
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_capacity
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_capacities
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_10
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mode_sense_6
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inquiry_cmd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_write
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_tx_thread_entry
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
</UL>

<P><STRONG><a name="[125]"></a>rt_usbd_msc_class_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mstorage.o(i.rt_usbd_msc_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_usbd_msc_class_register
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[4e8]"></a>rt_usbd_set_altsetting</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbdevice_core.o(i.rt_usbd_set_altsetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_usbd_set_altsetting &rArr; rt_usbd_find_altsetting &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_find_altsetting
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[123]"></a>rt_usbd_vcom_class_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cdc_vcom.o(i.rt_usbd_vcom_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_usbd_vcom_class_register
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_class_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[48c]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[4bf]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[126]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, workqueue.o(i.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[4ee]"></a>rt_workqueue_create</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, workqueue.o(i.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[1a8]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>serialThread</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uarttest.o(i.serialThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = serialThread &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttest.o(i.uart2_test)
</UL>
<P><STRONG><a name="[13f]"></a>set_date</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, rtc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = set_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[16c]"></a>set_dns</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetif.o(i.set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_dns &rArr; ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[16b]"></a>set_if</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ethernetif.o(i.set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + Unknown Stack Size
<LI>Call Chain = set_if &rArr; netif_set_ipaddr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[140]"></a>set_time</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, rtc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = set_time &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[4f4]"></a>sfud_chip_erase</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[4b5]"></a>sfud_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[4b0]"></a>sfud_erase</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
</UL>

<P><STRONG><a name="[4b7]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(i.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[4b6]"></a>sfud_read</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
</UL>

<P><STRONG><a name="[37f]"></a>sfud_read_sfdp</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sfud_sfdp.o(i.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4f2]"></a>sfud_read_status</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[4f6]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud_sfdp.o(i.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sfud_sfdp_get_suitable_eraser &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[37d]"></a>sfud_spi_port_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfud_spi_port_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[4f3]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[381]"></a>sfud_write_status</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[229]"></a>sys_arch_assert</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[42d]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[429]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[3d8]"></a>sys_arch_sem_wait</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[4f7]"></a>sys_check_timeouts</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[3cc]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[423]"></a>sys_mbox_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[421]"></a>sys_mbox_new</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[424]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[320]"></a>sys_mbox_trypost</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[31f]"></a>sys_mbox_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[3d9]"></a>sys_mutex_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>

<P><STRONG><a name="[4f8]"></a>sys_mutex_new</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[3d7]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>

<P><STRONG><a name="[3c6]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[42a]"></a>sys_sem_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[422]"></a>sys_sem_new</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[42b]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[322]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
</UL>

<P><STRONG><a name="[321]"></a>sys_sem_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[4f9]"></a>sys_thread_new</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[4fa]"></a>sys_timeout</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[3d4]"></a>sys_timeouts_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4fb]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[4fc]"></a>tcp_abandon</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[3e2]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[3db]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[501]"></a>tcp_alloc</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[3da]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[405]"></a>tcp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[3e0]"></a>tcp_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[3c0]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[50f]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_eff_send_mss_netif &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[510]"></a>tcp_enqueue_flags</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[3df]"></a>tcp_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[512]"></a>tcp_fasttmr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4fe]"></a>tcp_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(i.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = tcp_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[447]"></a>tcp_free_ooseq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[3d1]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3b1]"></a>tcp_input</STRONG> (Thumb, 2020 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[51a]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[434]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[44f]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[51f]"></a>tcp_next_iss</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tcp_next_iss &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[3ec]"></a>tcp_output</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[507]"></a>tcp_pcb_purge</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4fd]"></a>tcp_pcb_remove</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[3de]"></a>tcp_poll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[513]"></a>tcp_process_refused_data</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[3dc]"></a>tcp_recv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[d2]"></a>tcp_recv_null</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[3e5]"></a>tcp_recved</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
</UL>

<P><STRONG><a name="[52c]"></a>tcp_rexmit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[52d]"></a>tcp_rexmit_fast</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[52a]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[531]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[530]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_rexmit_rto_prepare &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[500]"></a>tcp_rst</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[52f]"></a>tcp_seg_copy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[50e]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[4ff]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[517]"></a>tcp_send_empty_ack</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[50c]"></a>tcp_send_fin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[3dd]"></a>tcp_sent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[3e1]"></a>tcp_shutdown</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[532]"></a>tcp_slowtmr</STRONG> (Thumb, 1670 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[534]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = tcp_split_unsent_seg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[520]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[10a]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[508]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[52e]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[3eb]"></a>tcp_write</STRONG> (Thumb, 1900 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[533]"></a>tcp_zero_window_probe</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[43f]"></a>tcpip_api_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_api_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>

<P><STRONG><a name="[40d]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[537]"></a>tcpip_inpkt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = tcpip_inpkt &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[d5]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.tcpip_init_done_callback)
</UL>
<P><STRONG><a name="[426]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[449]"></a>tcpip_try_callback</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_try_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[287]"></a>time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[2d2]"></a>udp_bind</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[406]"></a>udp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp.o(i.udp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[2d3]"></a>udp_connect</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[3d0]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3b0]"></a>udp_input</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[435]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[2d1]"></a>udp_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[2f4]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2d4]"></a>udp_recv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, udp.o(i.udp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = udp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[2c3]"></a>udp_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>

<P><STRONG><a name="[3e9]"></a>udp_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[309]"></a>udp_sendto</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[2dc]"></a>udp_sendto_if</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[2c6]"></a>udp_sendto_if_src</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[26f]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[4e3]"></a>vcom_get_stored_serno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_vcom.o(i.vcom_get_stored_serno))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[14e]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[26b]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[73]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[582]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[583]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12e]"></a>uart2_test</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, uarttest.o(i.uart2_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = uart2_test &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttest.o(FSymTab)
</UL>
<P><STRONG><a name="[d9]"></a>uartRX</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uarttest.o(i.uartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = uartRX &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttest.o(i.uart2_test)
</UL>
<P><STRONG><a name="[259]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[379]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[37a]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[37b]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[9b]"></a>rt_hwtimer_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hwtimer.o(i.rt_hwtimer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[9e]"></a>rt_hwtimer_control</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, hwtimer.o(i.rt_hwtimer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_hwtimer_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[99]"></a>rt_hwtimer_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hwtimer.o(i.rt_hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[9a]"></a>rt_hwtimer_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hwtimer.o(i.rt_hwtimer_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hwtimer_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[9c]"></a>rt_hwtimer_read</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, hwtimer.o(i.rt_hwtimer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_hwtimer_read &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[9d]"></a>rt_hwtimer_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hwtimer.o(i.rt_hwtimer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hwtimer_write &rArr; timeout_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[485]"></a>timeout_calc</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, hwtimer.o(i.timeout_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</UL>

<P><STRONG><a name="[b6]"></a>i2c_bus_device_control</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, i2c_dev.o(i.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[b4]"></a>i2c_bus_device_read</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[b5]"></a>i2c_bus_device_write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[1b5]"></a>SCL_H</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[384]"></a>i2c_bit_send_address</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[db]"></a>i2c_bit_xfer</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>i2c_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[390]"></a>i2c_delay2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[38f]"></a>i2c_readb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, i2c-bit-ops.o(i.i2c_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[389]"></a>i2c_recv_bytes</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[387]"></a>i2c_restart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[391]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.i2c_send_ack_or_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = i2c_send_ack_or_nack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[385]"></a>i2c_send_address</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[38a]"></a>i2c_send_bytes</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[388]"></a>i2c_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_start &rArr; i2c_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[38b]"></a>i2c_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[392]"></a>i2c_waitack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.i2c_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>

<P><STRONG><a name="[386]"></a>i2c_writeb</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c-bit-ops.o(i.i2c_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[a1]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[9f]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[a0]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[a6]"></a>_adc_control</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, adc.o(i._adc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _adc_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[a5]"></a>_adc_read</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, adc.o(i._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[133]"></a>adc</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, adc.o(i.adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = adc &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(FSymTab)
</UL>
<P><STRONG><a name="[134]"></a>dac</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, dac.o(i.dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dac &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dac_disabled
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dac.o(FSymTab)
</UL>
<P><STRONG><a name="[a4]"></a>_pwm_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_drv_pwm.o(i._pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[a2]"></a>_pwm_read</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[a3]"></a>_pwm_write</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[138]"></a>pwm_disable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pwm_disable &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[137]"></a>pwm_enable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pwm_enable &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[139]"></a>pwm_set</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = pwm_set &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[1f2]"></a>_pm_change_sleep_mode</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, pm.o(i._pm_change_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _pm_change_sleep_mode &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_exit_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_enter_critical
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_suspend
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_resume
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
</UL>

<P><STRONG><a name="[1fb]"></a>_pm_device_frequency_change</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pm.o(i._pm_device_frequency_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_frequency_scaling
</UL>

<P><STRONG><a name="[1f5]"></a>_pm_device_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pm.o(i._pm_device_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pm_device_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[1f4]"></a>_pm_device_suspend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pm.o(i._pm_device_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pm_device_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_change_sleep_mode
</UL>

<P><STRONG><a name="[1fa]"></a>_pm_frequency_scaling</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pm.o(i._pm_frequency_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pm_frequency_scaling &rArr; _pm_device_frequency_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pm_device_frequency_change
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
</UL>

<P><STRONG><a name="[4c1]"></a>_pm_select_sleep_mode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pm.o(i._pm_select_sleep_mode))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
</UL>

<P><STRONG><a name="[13d]"></a>rt_pm_dump_status</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pm.o(i.rt_pm_dump_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_pm_dump_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[13a]"></a>rt_pm_release_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pm.o(i.rt_pm_release_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_pm_release_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[13b]"></a>rt_pm_request_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pm.o(i.rt_pm_request_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_pm_request_mode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[13c]"></a>rt_pm_run_mode_switch</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pm.o(i.rt_pm_run_mode_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_pm_run_mode_switch &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pm_run_enter
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(FSymTab)
</UL>
<P><STRONG><a name="[141]"></a>date</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtc.o(i.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = date &rArr; set_time &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[205]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[206]"></a>_serial_dma_rx</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[20a]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[20c]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[20d]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[20e]"></a>_serial_int_tx</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[210]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[211]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[208]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[209]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[475]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[aa]"></a>rt_serial_close</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ad]"></a>rt_serial_control</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[a8]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[a9]"></a>rt_serial_open</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ab]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ac]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bc]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[ba]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[bb]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[d1]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(i.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[b9]"></a>rt_sfud_control</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[b7]"></a>rt_sfud_read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[b8]"></a>rt_sfud_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[142]"></a>sf</STRONG> (Thumb, 2010 bytes, Stack size 96 bytes, spi_flash_sfud.o(i.sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = sf &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(FSymTab)
</UL>
<P><STRONG><a name="[cf]"></a>spi_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[d0]"></a>spi_unlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[ce]"></a>spi_write_read</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, spi_flash_sfud.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = spi_write_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[21f]"></a>aai_write</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[37c]"></a>hardware_init</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[222]"></a>make_adress_byte_array</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sfud.o(i.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = make_adress_byte_array &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[220]"></a>page256_or_1_byte_write</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[37e]"></a>read_jedec_id</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = read_jedec_id &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[380]"></a>reset</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = reset &rArr; wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[382]"></a>set_4_byte_address_mode</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[221]"></a>set_write_enabled</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = set_write_enabled &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[4f5]"></a>software_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sfud.o(i.software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = software_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[223]"></a>wait_busy</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = wait_busy &rArr; sfud_read_status &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[457]"></a>read_basic_header</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, sfud_sfdp.o(i.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = read_basic_header &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[459]"></a>read_basic_table</STRONG> (Thumb, 2002 bytes, Stack size 88 bytes, sfud_sfdp.o(i.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = read_basic_table &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[458]"></a>read_sfdp_data</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[45a]"></a>read_sfdp_header</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = read_sfdp_header &rArr; read_sfdp_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[45d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[466]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[469]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[46a]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[49e]"></a>rt_ringbuffer_status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ringbuffer.o(i.rt_ringbuffer_status))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
</UL>

<P><STRONG><a name="[cc]"></a>_workqueue_thread_entry</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, workqueue.o(i._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = _workqueue_thread_entry &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i.rt_workqueue_create)
</UL>
<P><STRONG><a name="[4ef]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>

<P><STRONG><a name="[21a]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[b0]"></a>rt_watchdog_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_watchdog_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[b1]"></a>rt_watchdog_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, watchdog.o(i.rt_watchdog_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[ae]"></a>rt_watchdog_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[af]"></a>rt_watchdog_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(i.rt_watchdog_open))
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[1be]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b9]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo200M
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo200M
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ba]"></a>SetSysClockTo200M</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, system_at32f4xx.o(i.SetSysClockTo200M))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo200M
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_StepModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[df]"></a>at32_pin_attach_irq</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_gpio.o(i.at32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>at32_pin_dettach_irq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>at32_pin_irq_enable</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, drv_gpio.o(i.at32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at32_pin_irq_enable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>at32_pin_mode</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_pin_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>at32_pin_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>at32_pin_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
</UL>

<P><STRONG><a name="[24b]"></a>get_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_read
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
</UL>

<P><STRONG><a name="[b3]"></a>wdt_control</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, drv_wdt.o(i.wdt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wdt_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_KeyRegWrite
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_hw_wdt_init)
</UL>
<P><STRONG><a name="[b2]"></a>wdt_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_wdt.o(i.wdt_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_hw_wdt_init)
</UL>
<P><STRONG><a name="[e2]"></a>at32_configure</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, drv_usart.o(i.at32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = at32_configure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>at32_control</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, drv_usart.o(i.at32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>at32_getc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_usart.o(i.at32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>at32_putc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_usart.o(i.at32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>usart_isr</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drv_usart.o(i.usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = usart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>drv_pwm_control</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = drv_pwm_control &rArr; drv_pwm_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.data)
</UL>
<P><STRONG><a name="[30d]"></a>drv_pwm_enable</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_pwm_enable &rArr; TMR_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[30f]"></a>drv_pwm_get</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, drv_pwm.o(i.drv_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_pwm_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[30e]"></a>drv_pwm_set</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, drv_pwm.o(i.drv_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_pwm_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseStructInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OCStructInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC4PreloadConfig
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC4Init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC3PreloadConfig
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC3Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2PreloadConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC1PreloadConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC1Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_CtrlPWMOutputs
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ARPreloadConfig
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[11a]"></a>rt_hw_pwm_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, drv_pwm.o(i.rt_hw_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_hw_pwm_init &rArr; rt_device_pwm_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[e9]"></a>at32_timer_counter_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_hwtimer.o(i.at32_timer_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_timer_counter_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>at32_timer_ctrl</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, drv_hwtimer.o(i.at32_timer_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at32_timer_ctrl &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_DIVConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>at32_timer_init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, drv_hwtimer.o(i.at32_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = at32_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_INTConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_hwtmr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>at32_timer_start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_hwtimer.o(i.at32_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetAutoreload
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SelectOnePulseMode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>at32_timer_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_hwtimer.o(i.at32_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>rt_hw_hwtimer_init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, drv_hwtimer.o(i.rt_hw_hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_hw_hwtimer_init &rArr; rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[4]"></a>configure</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, drv_spi.o(i.configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = configure &rArr; at32_msp_spi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CRCEN
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>xfer</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, drv_spi.o(i.xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xfer &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_RxData
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>at32_get_scl</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_get_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_get_scl &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>at32_get_sda</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_get_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_get_sda &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>at32_i2c_bus_unlock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_i2c_bus_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at32_i2c_bus_unlock &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[242]"></a>at32_i2c_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_i2c_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at32_i2c_gpio_init &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[ec]"></a>at32_set_scl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_set_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at32_set_scl &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>at32_set_sda</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.at32_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at32_set_sda &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>at32_udelay</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, drv_soft_i2c.o(i.at32_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = at32_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_i2c_bus_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>at32_adc_enabled</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, drv_adc.o(i.at32_adc_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at32_adc_enabled &rArr; at32_msp_adc_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RstCalibration
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ctrl
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_get_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>at32_adc_get_channel</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, drv_adc.o(i.at32_adc_get_channel))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[f1]"></a>at32_get_adc_value</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_adc.o(i.at32_get_adc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_get_adc_value &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCtrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>rt_hw_adc_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, drv_adc.o(i.rt_hw_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_hw_adc_init &rArr; rt_hw_adc_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[374]"></a>get_rtc_timestamp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_rtc.o(i.get_rtc_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_rtc_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[47f]"></a>rt_hw_rtc_register</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_rtc.o(i.rt_hw_rtc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[481]"></a>rt_rtc_config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>

<P><STRONG><a name="[a7]"></a>rt_rtc_control</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_rtc.o(i.rt_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[480]"></a>rt_rtc_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_rtc_init &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>

<P><STRONG><a name="[4a7]"></a>set_rtc_time_stamp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_rtc.o(i.set_rtc_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_rtc_time_stamp &rArr; BKP_WriteBackupReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[350]"></a>fd_alloc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = fd_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[1e8]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[278]"></a>copydir</STRONG> (Thumb, 246 bytes, Stack size 384 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[277]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[f8]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[298]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[263]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[280]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[340]"></a>clmt_clust</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[2e7]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[271]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[27b]"></a>create_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[27e]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2e0]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2e3]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2e2]"></a>dir_next</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2e8]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2ea]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[2ee]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[2e1]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[33f]"></a>find_volume</STRONG> (Thumb, 836 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[342]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[2ec]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[27c]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[34f]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[349]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[34e]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[266]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[265]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[35a]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2e5]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2eb]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[281]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[264]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[2e9]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[27d]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2ed]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[347]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[345]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[344]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[34b]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[2e4]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[346]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[2e6]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[33e]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[33d]"></a>validate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[361]"></a>finsh_getchar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[80]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[36b]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[36a]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[36d]"></a>shell_push_history</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[14d]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3b9]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3bb]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3ba]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3bc]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[3bd]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[3be]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1ee]"></a>_msh_exec_cmd</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1ef]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1f1]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[419]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[41e]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(i.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[120]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[116]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[12d]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[115]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[4ce]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[be]"></a>rt_thread_idle_entry</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_power_manager
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[488]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[489]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>

<P><STRONG><a name="[478]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[477]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[48b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[48a]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[479]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[4ed]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[4ec]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[451]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[498]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[499]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[1e6]"></a>_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1ff]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[4c3]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[200]"></a>_rt_thread_init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[4cc]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[4d1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[203]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[4ba]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[204]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[4d4]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[4bb]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[bd]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.rt_thread_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[4d3]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timer.o(i.rt_timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[22c]"></a>num2str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.num2str))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[d6]"></a>netif_device_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sys_arch.o(i.netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.tcpip_init_done_callback)
</UL>
<P><STRONG><a name="[88]"></a>tcpip_init_done_callback</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, sys_arch.o(i.tcpip_init_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = tcpip_init_done_callback &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.lwip_system_init)
</UL>
<P><STRONG><a name="[2f2]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[2f3]"></a>dns_alloc_random_port</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_random_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[2fa]"></a>dns_backupserver_available</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dns.o(i.dns_backupserver_available))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[2f5]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[2f6]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + Unknown Stack Size
<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[2f7]"></a>dns_check_entry</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_backupserver_available
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[2fb]"></a>dns_compare_name</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[2fd]"></a>dns_correct_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_correct_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[2f8]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_create_txid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[2fe]"></a>dns_enqueue</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[303]"></a>dns_lookup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[7b]"></a>dns_recv</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_backupserver_available
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_random_port)
</UL>
<P><STRONG><a name="[2f9]"></a>dns_send</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[305]"></a>dns_skip_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dns.o(i.dns_skip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[3ad]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[30a]"></a>do_memp_free_pool</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[30c]"></a>do_memp_malloc_pool_fn</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, memp.o(i.do_memp_malloc_pool_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[30b]"></a>memp_overflow_check_element</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_check_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[416]"></a>memp_overflow_init_element</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_init_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = memp_overflow_init_element &rArr; mem_overflow_init_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_init_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>

<P><STRONG><a name="[433]"></a>netif_do_ip_addr_changed</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_do_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[43a]"></a>netif_do_set_gw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i.netif_do_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[437]"></a>netif_do_set_ipaddr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, netif.o(i.netif_do_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[439]"></a>netif_do_set_netmask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i.netif_do_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_do_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[438]"></a>netif_issue_reports</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[92]"></a>netif_null_output_ip4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_null_output_ip4))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_add)
</UL>
<P><STRONG><a name="[440]"></a>pbuf_add_header_impl</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_add_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>

<P><STRONG><a name="[446]"></a>pbuf_free_ooseq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[95]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[448]"></a>pbuf_header_impl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[443]"></a>pbuf_init_alloced_pbuf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_init_alloced_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
</UL>

<P><STRONG><a name="[442]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[44c]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[453]"></a>raw_input_local_match</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, raw.o(i.raw_input_local_match))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[506]"></a>tcp_close_shutdown</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[50b]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[50a]"></a>tcp_free_listen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(i.tcp_free_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = tcp_free_listen &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[502]"></a>tcp_handle_closepend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i.tcp_handle_closepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = tcp_handle_closepend &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[505]"></a>tcp_kill_prio</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[504]"></a>tcp_kill_state</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[503]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[509]"></a>tcp_listen_closed</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_listen_closed &rArr; tcp_remove_listener &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[522]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[51e]"></a>tcp_remove_listener</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_remove_listener &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[514]"></a>tcp_free_acked_segments</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_free_acked_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = tcp_free_acked_segments &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[528]"></a>tcp_get_next_optbyte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_get_next_optbyte))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[519]"></a>tcp_input_delayed_close</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[516]"></a>tcp_listen_input</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[523]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[521]"></a>tcp_parseopt</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_parseopt &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_next_optbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[518]"></a>tcp_process</STRONG> (Thumb, 1786 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[52b]"></a>tcp_receive</STRONG> (Thumb, 3146 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[515]"></a>tcp_timewait_input</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[50d]"></a>tcp_create_segment</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[51b]"></a>tcp_output_alloc_header</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[526]"></a>tcp_output_alloc_header_common</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[51d]"></a>tcp_output_control_segment</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_control_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = tcp_output_control_segment &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[51c]"></a>tcp_output_fill_options</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_fill_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_output_fill_options &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[525]"></a>tcp_output_segment</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[527]"></a>tcp_output_segment_busy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_output_segment_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
</UL>

<P><STRONG><a name="[529]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[524]"></a>tcp_route</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_route &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[535]"></a>tcp_write_checks</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[82]"></a>lwip_cyclic_timer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timeouts.o(i.lwip_cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = lwip_cyclic_timer &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.lwip_cyclic_timer)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[3c7]"></a>sys_timeout_abs</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[d3]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[53d]"></a>udp_input_local_match</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = udp_input_local_match &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[53c]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[425]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[427]"></a>netconn_close_shutdown</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[42c]"></a>netconn_recv_data</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[42e]"></a>netconn_recv_data_tcp</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, api_lib.o(i.netconn_recv_data_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
</UL>

<P><STRONG><a name="[42f]"></a>netconn_tcp_recvd_msg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_lib.o(i.netconn_tcp_recvd_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[85]"></a>err_tcp</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[3d6]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[86]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[3ea]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 770 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[31e]"></a>lwip_netconn_err_to_msg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_err_to_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lwip_netconn_err_to_msg &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[3d5]"></a>netconn_drain</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[3e4]"></a>pcb_new</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[84]"></a>poll_tcp</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[96]"></a>recv_raw</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[cd]"></a>recv_tcp</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[97]"></a>recv_udp</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[83]"></a>sent_tcp</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[450]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[94]"></a>netifapi_do_netif_common</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, netifapi.o(i.netifapi_do_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_common)
</UL>
<P><STRONG><a name="[228]"></a>alloc_socket</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = alloc_socket &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[87]"></a>event_callback</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = event_callback &rArr; select_check_waiters &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[36f]"></a>free_socket</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_locked
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[371]"></a>free_socket_free_elements</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sockets.o(i.free_socket_free_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[370]"></a>free_socket_locked</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sockets.o(i.free_socket_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_socket_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[33b]"></a>get_socket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[4f0]"></a>lwip_poll_should_wake</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sockets.o(i.lwip_poll_should_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
</UL>

<P><STRONG><a name="[3f3]"></a>lwip_recv_tcp</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, sockets.o(i.lwip_recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[3f7]"></a>lwip_recv_tcp_from</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sockets.o(i.lwip_recv_tcp_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = lwip_recv_tcp_from &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[3fa]"></a>lwip_recvfrom_udp_raw</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, sockets.o(i.lwip_recvfrom_udp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom_udp_raw &rArr; netconn_recv_udp_raw_netbuf_flags &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[402]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 1306 bytes, Stack size 48 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind_netif
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind_netif
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind_netif
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[3f9]"></a>lwip_sock_make_addr</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, sockets.o(i.lwip_sock_make_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lwip_sock_make_addr &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
</UL>

<P><STRONG><a name="[3c3]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_drop_registered_memberships))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[408]"></a>lwip_socket_register_membership</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_register_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_socket_register_membership &rArr; get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[409]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_unregister_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_socket_unregister_membership &rArr; get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[403]"></a>lwip_sockopt_to_ipopt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sockets.o(i.lwip_sockopt_to_ipopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lwip_sockopt_to_ipopt &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[33c]"></a>select_check_waiters</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sockets.o(i.select_check_waiters))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = select_check_waiters &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[376]"></a>tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[53a]"></a>tryget_socket_unconn</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket_unconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn_nouse
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>

<P><STRONG><a name="[53b]"></a>tryget_socket_unconn_nouse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket_unconn_nouse))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>

<P><STRONG><a name="[d4]"></a>tcpip_thread</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; tcpip_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[539]"></a>tcpip_thread_handle_msg</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread_handle_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = tcpip_thread_handle_msg &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[538]"></a>tcpip_timeouts_mbox_fetch</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = tcpip_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[7e]"></a>eth_rx_thread_entry</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ethernetif.o(i.eth_rx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[7f]"></a>eth_tx_thread_entry</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ethernetif.o(i.eth_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[2b3]"></a>dhcp_bind</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2b6]"></a>dhcp_check</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2bc]"></a>dhcp_create_msg</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2c2]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>

<P><STRONG><a name="[2b2]"></a>dhcp_decline</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[2c8]"></a>dhcp_discover</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2cb]"></a>dhcp_handle_ack</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2cd]"></a>dhcp_handle_nak</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2ce]"></a>dhcp_handle_offer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2d0]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[2c0]"></a>dhcp_option</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = dhcp_option &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2c1]"></a>dhcp_option_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dhcp_option_byte &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2d7]"></a>dhcp_option_hostname</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_option_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = dhcp_option_hostname &rArr; dhcp_option &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[2c4]"></a>dhcp_option_long</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dhcp_option_long &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2c9]"></a>dhcp_option_short</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dhcp_option_short &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2c5]"></a>dhcp_option_trailer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = dhcp_option_trailer &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2d9]"></a>dhcp_parse_reply</STRONG> (Thumb, 1410 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2db]"></a>dhcp_rebind</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[2d6]"></a>dhcp_reboot</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[7a]"></a>dhcp_recv</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[2cf]"></a>dhcp_select</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[2b4]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2bb]"></a>dhcp_t1_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2ba]"></a>dhcp_t2_timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2ca]"></a>dhcp_timeout</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[329]"></a>etharp_find_entry</STRONG> (Thumb, 524 bytes, Stack size 56 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[32a]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[330]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[32e]"></a>etharp_raw</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[333]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[32d]"></a>etharp_update_arp_entry</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[32b]"></a>free_etharp_q</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[394]"></a>icmp_send_response</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[39b]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[39f]"></a>igmp_ip_output_if</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[3a3]"></a>igmp_lookup_group</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[3a7]"></a>igmp_remove_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[3a4]"></a>igmp_send</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[39c]"></a>igmp_start_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[3aa]"></a>igmp_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[3ae]"></a>ip4_input_accept</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ip4.o(i.ip4_input_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip4_input_accept &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3f1]"></a>ping_prepare_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ping.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[288]"></a>dcd_ep_read_prepare</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbdevice_core.o(i.dcd_ep_read_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_read_prepare
</UL>

<P><STRONG><a name="[289]"></a>dcd_ep_set_stall</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdevice_core.o(i.dcd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_ep_set_stall &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_set_stall
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>

<P><STRONG><a name="[28a]"></a>dcd_ep_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbdevice_core.o(i.dcd_ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_write
</UL>

<P><STRONG><a name="[4db]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice_core.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_new
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_new
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_endpoint_new
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_new
</UL>

<P><STRONG><a name="[4d8]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdevice_core.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_interface_add_altsetting
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_add_interface
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_altsetting_add_endpoint
</UL>

<P><STRONG><a name="[4df]"></a>rt_usbd_ep_read_prepare</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_ep_read_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbd_ep_read_prepare &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>

<P><STRONG><a name="[4e0]"></a>rt_usbd_ep_write</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usbdevice_core.o(i.rt_usbd_ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>

<P><STRONG><a name="[4e6]"></a>_cdc_descriptor_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cdc_vcom.o(i._cdc_descriptor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _cdc_descriptor_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[1cd]"></a>_cdc_get_line_coding</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cdc_vcom.o(i._cdc_get_line_coding))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _cdc_get_line_coding &rArr; rt_usbd_ep0_write &rArr; dcd_ep_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
</UL>

<P><STRONG><a name="[1cf]"></a>_cdc_set_line_coding</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cdc_vcom.o(i._cdc_set_line_coding))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _cdc_set_line_coding &rArr; rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
</UL>

<P><STRONG><a name="[76]"></a>_cdc_set_line_coding_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cdc_vcom.o(i._cdc_set_line_coding_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _cdc_set_line_coding_callback &rArr; dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i._cdc_set_line_coding)
</UL>
<P><STRONG><a name="[c3]"></a>_ep_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cdc_vcom.o(i._ep_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ep_cmd_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.rt_usbd_function_cdc_create)
</UL>
<P><STRONG><a name="[c5]"></a>_ep_in_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cdc_vcom.o(i._ep_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ep_in_handler &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.rt_usbd_function_cdc_create)
</UL>
<P><STRONG><a name="[c4]"></a>_ep_out_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cdc_vcom.o(i._ep_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = _ep_out_handler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.rt_usbd_function_cdc_create)
</UL>
<P><STRONG><a name="[7]"></a>_function_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cdc_vcom.o(i._function_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _function_disable &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_reset_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>_function_enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cdc_vcom.o(i._function_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _function_enable &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_reset_state
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>_interface_handler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, cdc_vcom.o(i._interface_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _interface_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_set_line_coding
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_get_line_coding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.rt_usbd_function_cdc_create)
</UL>
<P><STRONG><a name="[110]"></a>_vcom_configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_vcom.o(i._vcom_configure))
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>_vcom_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cdc_vcom.o(i._vcom_control))
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_vcom_getc</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, cdc_vcom.o(i._vcom_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _vcom_getc &rArr; rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>_vcom_putc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cdc_vcom.o(i._vcom_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _vcom_putc &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>_vcom_rb_block_put</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, cdc_vcom.o(i._vcom_rb_block_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _vcom_rb_block_put &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_tx
</UL>

<P><STRONG><a name="[1df]"></a>_vcom_reset_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cdc_vcom.o(i._vcom_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _vcom_reset_state &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_enable
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_function_disable
</UL>

<P><STRONG><a name="[114]"></a>_vcom_tx</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, cdc_vcom.o(i._vcom_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = _vcom_tx &rArr; _vcom_rb_block_put &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vcom_rb_block_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>dcd_ep0_send_status</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cdc_vcom.o(i.dcd_ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cdc_set_line_coding_callback
</UL>

<P><STRONG><a name="[4d6]"></a>rt_usb_vcom_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, cdc_vcom.o(i.rt_usb_vcom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = rt_usb_vcom_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_cdc_create
</UL>

<P><STRONG><a name="[c1]"></a>vcom_tx_thread_entry</STRONG> (Thumb, 210 bytes, Stack size 136 bytes, cdc_vcom.o(i.vcom_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = vcom_tx_thread_entry &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.rt_usb_vcom_init)
</UL>
<P><STRONG><a name="[c8]"></a>_ep_in_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hid.o(i._ep_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ep_in_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[c7]"></a>_ep_out_handler</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, hid.o(i._ep_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = _ep_out_handler &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[a]"></a>_function_disable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hid.o(i._function_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _function_disable &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_function_enable</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hid.o(i._function_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _function_enable &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.data)
</UL>
<P><STRONG><a name="[4e9]"></a>_hid_descriptor_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hid.o(i._hid_descriptor_config))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[77]"></a>_hid_set_report_callback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hid.o(i._hid_set_report_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _hid_set_report_callback &rArr; dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i._interface_handler)
</UL>
<P><STRONG><a name="[bf]"></a>_hid_write</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, hid.o(i._hid_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = _hid_write &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i.rt_usb_hid_init)
</UL>
<P><STRONG><a name="[c6]"></a>_interface_handler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, hid.o(i._interface_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _interface_handler &rArr; rt_usbd_ep0_read &rArr; dcd_ep_read_prepare &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i.rt_usbd_function_hid_create)
</UL>
<P><STRONG><a name="[1ea]"></a>dcd_ep0_send_status</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hid.o(i.dcd_ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hid_set_report_callback
</UL>

<P><STRONG><a name="[31d]"></a>dump_data</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hid.o(i.dump_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_report
</UL>

<P><STRONG><a name="[1b0]"></a>dump_report</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hid.o(i.dump_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = dump_report &rArr; dump_data &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report_Received
</UL>

<P><STRONG><a name="[c0]"></a>hid_thread_entry</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, hid.o(i.hid_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = hid_thread_entry &rArr; rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report_Received
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(i.rt_usb_hid_init)
</UL>
<P><STRONG><a name="[4d5]"></a>rt_usb_hid_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hid.o(i.rt_usb_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = rt_usb_hid_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_hid_create
</UL>

<P><STRONG><a name="[f]"></a>_allow_removal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mstorage.o(i._allow_removal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _allow_removal &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[1c9]"></a>_cb_len_calc</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, mstorage.o(i._cb_len_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _cb_len_calc &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[1cb]"></a>_cbw_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mstorage.o(i._cbw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _cbw_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[1cc]"></a>_cbw_verify</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, mstorage.o(i._cbw_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _cbw_verify &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[ca]"></a>_ep_in_handler</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, mstorage.o(i._ep_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = _ep_in_handler &rArr; _send_status &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_status
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_set_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(i.rt_usbd_function_mstorage_create)
</UL>
<P><STRONG><a name="[cb]"></a>_ep_out_handler</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, mstorage.o(i._ep_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = _ep_out_handler &rArr; _send_status &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_status
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_cbw_command
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbw_verify
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbw_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cb_len_calc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep_set_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(i.rt_usbd_function_mstorage_create)
</UL>
<P><STRONG><a name="[1dd]"></a>_find_cbw_command</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mstorage.o(i._find_cbw_command))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
</UL>

<P><STRONG><a name="[18]"></a>_function_disable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mstorage.o(i._function_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _function_disable &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_function_enable</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, mstorage.o(i._function_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _function_enable &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_inquiry_cmd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mstorage.o(i._inquiry_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _inquiry_cmd &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>_interface_handler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mstorage.o(i._interface_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _interface_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_ep0_send_status
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_ep0_set_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(i.rt_usbd_function_mstorage_create)
</UL>
<P><STRONG><a name="[10]"></a>_mode_sense_6</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mstorage.o(i._mode_sense_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _mode_sense_6 &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[4ea]"></a>_mstorage_descriptor_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mstorage.o(i._mstorage_descriptor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mstorage_descriptor_config
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_function_mstorage_create
</UL>

<P><STRONG><a name="[14]"></a>_read_10</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mstorage.o(i._read_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _read_10 &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_read_capacities</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mstorage.o(i._read_capacities))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = _read_capacities &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_read_capacity</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, mstorage.o(i._read_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = _read_capacity &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_request_sense</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, mstorage.o(i._request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _request_sense &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>_send_status</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mstorage.o(i._send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = _send_status &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_out_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ep_in_handler
</UL>

<P><STRONG><a name="[11]"></a>_start_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mstorage.o(i._start_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _start_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_test_unit_ready</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mstorage.o(i._test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _test_unit_ready &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_verify_10</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mstorage.o(i._verify_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _verify_10 &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>_write_10</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mstorage.o(i._write_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = _write_10 &rArr; rt_usbd_io_request &rArr; rt_usbd_ep_write &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbd_io_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mstorage.o(.data)
</UL>
<P><STRONG><a name="[1ed]"></a>dcd_ep0_send_status</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mstorage.o(i.dcd_ep0_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dcd_ep0_send_status &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_interface_handler
</UL>

<P><STRONG><a name="[75]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
